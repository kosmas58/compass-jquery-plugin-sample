- content_for :head_scripts do
  = javascript_include_tag :dynatree
  = javascript_include_tag :contextMenu
  :javascript
    // --- Implement Cut/Copy/Paste --------------------------------------------
    var clipboardNode = null;
    var pasteMode = null;

    function copyPaste(action, node) {
      switch( action ) {
        case "cut":
        case "copy":
          clipboardNode = node;
          pasteMode = action;
          break;
        case "paste":
          if( !clipboardNode ) {
            alert("Clipoard is empty.");
            break;
          }
          if( pasteMode == "cut" ) {
            // Cut mode: check for recursion and remove source
            var isRecursive = false;
            var cb = clipboardNode.toDict(true, function(dict){
              // If one of the source nodes is the target, we must not move
              if( dict.key == node.data.key )
                isRecursive = true;
            });
            if( isRecursive ) {
              alert("Cannot move a node to a sub node.");
              return;
            }
            node.addChild(cb);
            clipboardNode.remove();
          } else {
            // Copy mode: prevent duplicate keys:
            var cb = clipboardNode.toDict(true, function(dict){
              dict.title = "Copy of " + dict.title;
              delete dict.key; // Remove key, so a new one will be created
            });
            node.addChild(cb);
          }
          clipboardNode = pasteMode = null;
          // Must enable context menu for new nodes
          bindContextMenu();
          break;
        default:
          alert("Unhandled clipboard action '" + action + "'");
        }
      };

      // --- Contextmenu helper --------------------------------------------------

      function bindContextMenu() {
        // Add context menu to all nodes:
        $("span.dynatree-node")
        .destroyContextMenu() // unbind first, to prevent duplicates
        .contextMenu({menu: "myMenu"}, function(action, el, pos) {
          // The event was bound to thetag, but the node object
          // is stored in the parenttag
          var node = el.parent().attr("dtnode");
          switch( action ) {
            case "cut":
            case "copy":
            case "paste":
              copyPaste(action, node);
              break;
            default:
              alert("Todo: appply action '" + action + "' to node " + node);
          }
        });
      };

      // --- Init dynatree during startup ----------------------------------------

      $(function() {
        $("#tree").dynatree({
        persist: true,
        onActivate: function(node) {
          $("#echoActivated").text(node.data.title + ", key=" + node.data.key);
        },
        onClick: function(node, event) {
          // Eat mouse events, while a menu is open
          if( $(".contextMenu:visible").length > 0 ){
            return false;
          }
        },
        onKeydown: function(node, event) {
          // Eat keyboard events, when a menu is open
          if( $(".contextMenu:visible").length > 0 )
            return false;

          switch( event.which ) {
            // Open context menu on [Space] key (simulate right click)
            case 32: // [Space]
              $(node.span).trigger("mousedown", {
                preventDefault: true,
                button: 2
              })
              .trigger("mouseup", {
                preventDefault: true,
                pageX: node.span.offsetLeft,
                pageY: node.span.offsetTop,
                button: 2
              });
              return false;

            // Handle Ctrl-C, -X and -V
            case 67:
              if( event.ctrlKey ) { // Ctrl-C
                copyPaste("copy", node);
                return false;
              }
              break;
            case 86:
              if( event.ctrlKey ) { // Ctrl-V
                copyPaste("paste", node);
                return false;
              }
              break;
            case 88:
              if( event.ctrlKey ) { // Ctrl-X
                copyPaste("cut", node);
                return false;
              }
            break;
          }
        }
      });
      // Add context menu handler to tree nodes
      bindContextMenu();
    });

- content_for :license do
  = render :partial => "widgets/dynatree/license"

- content_for :head_stylesheets do
  :css
    .toolbar{ padding: 0.3em; }
    .ui-button{ font-size: 0.8em; }

- content_for :head_scripts do
  = javascript_include_tag :dynatree
  = javascript_include_tag :contextMenu
  :javascript
    $(function() {
      $("button", ".demo").button();

      // Initialize the tree inside the element.
      // The tree structure is read from the contained  tag.
      $("#tree").dynatree({
        onActivate: function(node) {
          $("#echoActive").text(node.data.title);
          // alert(node.getKeyPath());
          if( node.data.url )
            window.open(node.data.url, node.data.target);
        },
        onDeactivate: function(node) {
          $("#echoSelected").text("-");
        },
        onFocus: function(node) {
          $("#echoFocused").text(node.data.title);
        },
        onBlur: function(node) {
          $("#echoFocused").text("-");
        },
        onLazyRead: function(node){
          var fakeJsonResult = [
            { title: 'Lazy node 1', isLazy: true },
            { title: 'Simple node 2', select: true }
          ];
          // alert ("Let's pretend we're using this AJAX response to load the branch:\n " + jsonResult);
          function fakeAjaxResponse() {
            return function() {
              node.addChild(fakeJsonResult);
              // Remove the 'loading...' status:
              node.setLazyNodeStatus(DTNodeStatus_Ok);
            };
          }
          window.setTimeout(fakeAjaxResponse(), 1500);
        }
      });

      $("#btnAddCode").click(function(){
        // Sample: add an hierarchic branch using code.
        // This is how we would add tree nodes programatically
        var rootNode = $("#tree").dynatree("getRoot");
        var childNode = rootNode.addChild({
          title: "Programatically addded nodes",
          tooltip: "This folder and all child nodes were added programmatically.",
          isFolder: true
        });
        childNode.addChild({
          title: "Document using a custom icon",
          icon: "customdoc1.gif"
        });
      });

      $("#btnAddObject").click(function(){
        // Sample: add an hierarchic branch using an array
        var obj = [
          { title: 'Lazy node 1', isLazy: true },
          { title: 'Lazy node 2', isLazy: true },
          { title: 'Folder node 3', isFolder: true,
            children: [
              { title: 'node 3.1' },
              { title: 'node 3.2',
                children: [
                  { title: 'node 3.2.1' },
                  { title: 'node 3.2.2',
                    children: [
                      { title: 'node 3.2.2.1' }
                    ]
                  }
                ]
              }
            ]
          }
        ];
        $("#tree").dynatree("getRoot").addChild(obj);
      });

      $("#btnActiveNode").click(function(){
        $("#tree").dynatree("getTree").activateKey("id4_3_2");
        // $("#tree").dynatree("getTree").getNodeByKey("id4.3.2").activate();
      });
      $("#btnSetTitle").click(function(){
        var node = $("#tree").dynatree("getActiveNode");
        if( !node ) return;
        node.setTitle(node.data.title + ", " + new Date());
        // this is a shortcut for
        // node.fromDict({title: node.data.title + new Date()});
      });
      $("#btnFromDict").click(function(){
        var node = $("#tree").dynatree("getActiveNode");
        if( !node ) return;
        // Set node data and - optionally - replace children
        node.fromDict({
          title: node.data.title + new Date(),
          children: [{title: "t1"}, {title: "t2"}]
        });
      });

      $("#btnShowActive").click(function(){
        var node = $("#tree").dynatree("getActiveNode");
        if( node ){
          alert("Currently active: " + node.data.title);
        }else{
          alert("No active node.");
        }
      });

      $("#btnDisable").toggle(function(){
          $("#tree").dynatree("disable");
          $(this).text("Enable");
          return false;
        }, function(){
          $("#tree").dynatree("enable");
          $(this).text("Disable");
          return false;
        });
      $("#btnToggleExpand").click(function(){
        $("#tree").dynatree("getRoot").visit(function(node){
          node.toggleExpand();
        });
        return false;
      });
      $("#btnCollapseAll").click(function(){
        $("#tree").dynatree("getRoot").visit(function(node){
          node.expand(false);
        });
        return false;
      });
      $("#btnExpandAll").click(function(){
        $("#tree").dynatree("getRoot").visit(function(node){
          node.expand(true);
        });
        return false;
      });
      $("#btnSortActive").click(function(){
        var node = $("#tree").dynatree("getActiveNode");
        node.sortChildren();
      });
      $("#btnSortAll").click(function(){
        var node = $("#tree").dynatree("getRoot");
        node.sortChildren(null, true);
      });
    });

- content_for :license do
  = render :partial => "widgets/dynatree/license"

- content_for :head_scripts do
  = javascript_include_tag :dynatree
  = javascript_include_tag :contextMenu
  :javascript
    $(function() {
      // --- Initialize first Dynatree -------------------------------------------
      $("#tree").dynatree({
        initAjax: {
          url: "data3?format=json"
        },
        dnd: {
          onDragStart: function(node) {
            /** This function MUST be defined to enable dragging for the tree.
             *  Return false to cancel dragging of node.
             */
            // logMsg("tree.onDragStart(%o)", node);
            return true;
          },
          onDragStop: function(node) {
            // This function is optional.
            // logMsg("tree.onDragStop(%o)", node);
          },
          autoExpandMS: 1000,
          preventVoidMoves: true, // Prevent dropping nodes 'before self', etc.
          onDragEnter: function(node, sourceNode) {
            /** sourceNode may be null for non-dynatree droppables.
             *  Return false to disallow dropping on node. In this case
             *  onDragOver and onDragLeave are not called.
             *  Return 'over', 'before, or 'after' to force a hitMode.
             *  Return ['before', 'after'] to restrict available hitModes.
             *  Any other return value will calc the hitMode from the cursor position.
             */
            // logMsg("tree.onDragEnter(%o, %o)", node, sourceNode);
            // Prevent dropping a parent below it's own child
            // if(node.isDescendantOf(sourceNode))
            // return false;
            // Prevent dropping a parent below another parent (only sort
            // nodes under the same parent)
            // if(node.parent !== sourceNode.parent)
            // return false;
            // if(node === sourceNode)
            // return false;
            // Don't allow dropping *over* a node (would create a child)
            // return ["before", "after"];
            return true;
          },
          onDragOver: function(node, sourceNode, hitMode) {
            /** Return false to disallow dropping this node.
             *
             */
            logMsg("tree.onDragOver(%o, %o, %o)", node, sourceNode, hitMode);
            // Prohibit creating childs in non-folders (only sorting allowed)
            // if( !node.isFolder && hitMode == "over" )
            // return "after";
          },
          onDrop: function(node, sourceNode, hitMode, ui, draggable) {
            /** This function MUST be defined to enable dropping of items on
             * the tree.
             */
            // logMsg("tree.onDrop(%o, %o, %s)", node, sourceNode, hitMode);
            sourceNode.move(node, hitMode);
            // expand the drop target
            // sourceNode.expand(true);
          },
          onDragLeave: function(node, sourceNode) {
            /** Always called if onDragEnter was called.
             */
            // logMsg("tree.onDragLeave(%o, %o)", node, sourceNode);
          }
        }
      });
    });

- content_for :license do
  = render :partial => "widgets/dynatree/license"

- content_for :head_stylesheets do
  :css
    #toolbar_top, #toolbar_bottom{ padding: 0.3em; }
    #navigationtree { width:auto; height:400px; overflow:auto; }
    #text{ height: 1.9em; margin: 0 0.4em 0 0; padding: 0.2em 0 0.2em 0.2em; }
    .report{ background: lightyellow; width:auto; height:400px; overflow:auto; font-size:0.8em !important; }
    #alog{ padding: 0.5em; }
    .ui-button{ font-size: 0.9em; }

- content_for :head_scripts do
  = javascript_include_tag :jstree
  :javascript
    $(function () {
      // Settings up the tree - using $(selector).jstree(options);
      // All those configuration options are documented in the _docs folder
      $("#navigationtree")
          .jstree({
              // the list of plugins to include
              "plugins" : [ "themes", "json_data", "ui", "crrm", "cookies", "dnd", "search", "types", "hotkeys", "contextmenu" ],
              // Plugin configuration

              // I usually configure the plugin that handles the data first - in this case JSON as it is most common
              "json_data" : {
                  // I chose an ajax enabled tree - again - as this is most common, and maybe a bit more complex
                  // All the options are the same as jQuery's except for `data` which CAN (not should) be a function
                  "ajax" : {
                      // the URL to fetch the data
                      "url" : "/navigation/get_children",
                      // this function is executed in the instance's scope (this refers to the tree instance)
                      // the parameter is the node being loaded (may be -1, 0, or undefined when loading the root nodes)
                      "data" : function (n) {
                          // the result is fed to the AJAX request `data` option
                          return {
                              "id" : n.attr ? n.attr("id").replace("node_","") : 1
                          };
                      }
                  }
              },
              // Configuring the search plugin
              "search" : {
                  // As this has been a common question - async search
                  // Same as above - the `ajax` config option is actually jQuery's object (only `data` can be a function)
                  "ajax" : {
                      "url" : "/navigation/search",
                      // You get the search string as a parameter
                      "data" : function (str) {
                          return {
                              "format" : "json",
                              "search_str" : str
                          };
                      }
                  }
              },
              // Using types - most of the time this is an overkill
              // Still meny people use them - here is how
              "types" : {
                  // I set both options to -2, as I do not need depth and children count checking
                  // Those two checks may slow jstree a lot, so use only when needed
                  "max_depth" : -2,
                  "max_children" : -2,
                  // I want only `drive` nodes to be root nodes
                  // This will prevent moving or creating any other type as a root node
                  "valid_children" : [ "accordion" ],
                  "types" : {
                      // The default type
                      "default" : {
                          // I want this type to have no children (so only leaf nodes)
                          // In my case - those are files
                          "valid_children" : "none",
                          "icon" : {
                              "image" : "/images/icons/16x16/file.png"
                          }
                      },
                      // The `folder` type
                      "folder" : {
                          // can have files and other folders inside of it, but NOT `accordion` nodes
                          "valid_children" : [ "default", "folder" ],
                          "icon" : {
                              "image" : "/images/icons/16x16/folder.png"
                          }
                      },
                      // The `accordion` nodes
                      "accordion" : {
                          // can have files and folders inside, but NOT other `accordion` nodes
                          "valid_children" : [ "default", "folder" ],
                          "icon" : {
                              "image" : "/images/icons/16x16/accordion.png"
                          }//,
                          // those options prevent the functions with the same name to be used on the `accordion` type nodes
                          // internally the `before` event is used
                          //"start_drag" : false,
                          //"move_node" : false,
                          //"delete_node" : false,
                          //"remove" : false
                      }
                  }
              },
              //"crrm" : {
              //  "move" : {
              //    "check_move" : function (m) {
              //      var p = this._get_parent(m.o);
              //      if(!p) return false;
              //      p = p == -1 ? this.get_container() : p;
              //      if(p === m.np) return true;
              //      if(p[0] && m.np[0] && p[0] === m.np[0]) return true;
              //      return false;
              //    }
              //  }
              //},
              // For UI & core - the nodes to initially select and open will be overwritten by the cookie plugin
              "core" : {
                "html_titles" : true
              },
              // the UI plugin - it handles selecting/deselecting/hovering nodes
              "themes" : {
                  "theme" : "aero",
                  "dots"  : false
              },
              "contextmenu" : {
                      "items" : { // Could be a function that should return an object like this one
                          "create" : {
                              "separator_before"	: false,
                              "separator_after"	: true,
                              "label"				: "Create",
                              "icon"              : "/images/jquery/ui/contextMenu/new.png",
                              "action"			: function (obj) { this.create(obj); }
                          },
                          "edit" : {
                              "separator_before"	: true,
                              "separator_after"	: false,
                              "icon"              : "/images/jquery/ui/contextMenu/edit.png",
                              "label"				: "Edit",
                              "action"			: function (obj) { live_update(obj.attr("id").replace("node_","")); }
                          },
                          "rename" : {
                              "separator_before"	: false,
                              "separator_after"	: false,
                              "icon"              : "/images/jquery/ui/contextMenu/rename.png",
                              "label"				: "Rename",
                              "action"			: function (obj) { this.rename(obj); }
                          },
                          "remove" : {
                              "separator_before"	: false,
                              "icon"              : "/images/jquery/ui/contextMenu/delete.png",
                              "separator_after"	: false,
                              "label"				: "Delete",
                              "action"			: function (obj) { this.remove(obj); }
                          },
                          "ccp" : {
                              "separator_before"	: true,
                              "icon"              : "/images/jquery/ui/contextMenu/configure.png",
                              "separator_after"	: false,
                              "label"				: "Move",
                              "action"			: false,
                              "submenu" : {
                                  "cut" : {
                                      "separator_before"	: false,
                                      "separator_after"	: false,
                                      "icon"              : "/images/jquery/ui/contextMenu/cut.png",
                                      "label"				: "Cut",
                                      "action"			: function (obj) { this.cut(obj); }
                                  },
                                  "copy" : {
                                      "separator_before"	: false,
                                      "icon"              : "/images/jquery/ui/contextMenu/copy.png",
                                      "separator_after"	: false,
                                      "label"				: "Copy",
                                      "action"			: function (obj) { this.copy(obj); }
                                  },
                                  "paste" : {
                                      "separator_before"	: false,
                                      "icon"              : "/images/jquery/ui/contextMenu/paste.png",
                                      "separator_after"	: false,
                                      "label"				: "Paste",
                                      "action"			: function (obj) { this.paste(obj); }
                                  }
                              }
                          }
                      }
                  }
          })
          .bind("create.jstree", function (e, data) {
              $.post(
                  "/navigation/create",
                  {
                      "id" : ( data.rslt.parent == -1) ? -1 : data.rslt.parent.attr("id").replace("node_",""),
                      "position" : data.rslt.position,
                      "title" : data.rslt.name,
                      "type" : data.rslt.obj.attr("rel")
                  },
                  function (r) {
                      if(r.status) {
                          $(data.rslt.obj).attr("id", "node_" + r.id);
                      }
                      else {
                          $.jstree.rollback(data.rlbk);
                      }
                  }
              );
          })
          .bind("remove.jstree", function (e, data) {
              data.rslt.obj.each(function () {
                  $.ajax({
                      async : false,
                      type: 'DELETE',
                      url: "/navigation/" + this.id.replace("node_",""),
                      //data : {
                      //    "id" : this.id.replace("node_","")
                      //},
                      success : function (r) {
                          if(!r.status) {
                              data.inst.refresh();
                          }
                      }
                  });
              });
          })
          .bind("rename.jstree", function (e, data) {
                  $.post(
                      "/navigation/" + data.rslt.obj.attr("id").replace("node_","") + "/rename",
                      {
                          "title" : data.rslt.new_name
                      },
                      function (r) {
                          if(!r.status) {
                              $.jstree.rollback(data.rlbk);
                          }
                      }
                  );
              })
          .bind("move_node.jstree", function (e, data) {
              data.rslt.o.each(function (i) {
                  $.ajax({
                      //async : false,
                      type: 'PUT',
                      url: "/navigation/" + $(this).attr("id").replace("node_","") + "/move",
                      data : {
                          "id" : $(this).attr("id").replace("node_",""),
                          "ref" : data.rslt.np.attr("id").replace("node_",""),
                          "position" : data.rslt.cp + i,
                          "title" : data.rslt.name,
                          "copy" : data.rslt.cy ? 1 : 0
                      },
                      success : function (r) {
                          if(!r.status) {
                              $.jstree.rollback(data.rlbk);
                          }
                          else {
                              $(data.rslt.oc).attr("id", "node_" + r.id);
                              if(data.rslt.cy && $(data.rslt.oc).children("UL").length) {
                                  data.inst.refresh(data.inst._get_parent(data.rslt.oc));
                              }
                          }
                          //$("#analyze").click();
                      }
                  });
              });
          });
    });

    $(function() {
      $('#add_accordion').button({
        text: false,
        icons: {
          primary: 'ui-icon-plusthick',
          secondary: 'ui-icon-star'
        }
      })
      .click(function() {
        $("#navigationtree").jstree("create", -1, "last", { "attr" : { "rel" : "accordion" }, "data" : "New accordion:" });
      });
      $('#add_folder').button({
        text: false,
        icons: {
          primary: 'ui-icon-plusthick',
          secondary: 'ui-icon-folder-collapsed'
        }
      })
      .click(function() {
        $("#navigationtree").jstree("create", null, "last", { "attr" : { "rel" : this.id.toString().replace("add_", "") } });
      });
      $('#add_default').button({
        text: false,
        icons: {
          primary: 'ui-icon-plusthick',
          secondary: 'ui-icon-document'
        }
      })
      .click(function() {
        $("#navigationtree").jstree("create", null, "last", { "attr" : { "rel" : this.id.toString().replace("add_", "") } });
      });
      $('#rename').button()
      .click(function() {
        $("#navigationtree").jstree(this.id);
      });
      $('#cut').button({
        text: false,
        icons: {
          secondary: 'ui-icon-scissors'
        }
      })
      .click(function() {
        $("#navigationtree").jstree(this.id);
      });
      $('#copy').button({
        text: false,
        icons: {
          secondary: 'ui-icon-copy'
        }
      })
      .click(function() {
        $("#navigationtree").jstree(this.id);
      });
      $('#paste').button({
        text: false,
        icons: {
          secondary: 'ui-icon-clipboard'
        }
      })
      .click(function() {
        $("#navigationtree").jstree(this.id);
      });
      $('#remove').button({
        text: false,
        icons: {
          secondary: 'ui-icon-trash'
        }
      })
      .click(function() {
        $("#navigationtree").jstree(this.id);
      });
      $('#search').button({
        text: false,
        icons: {
          secondary: 'ui-icon-search'
        }
      })
      .click(function() {
        $("#navigationtree").jstree("search", document.getElementById("text").value);
      });
      $('#clear_search').button({
        text: false,
        icons: {
          secondary: 'ui-icon-close'
        }
      })
      .click(function() {
        document.getElementById("text").value = "";
        $("#navigationtree").jstree(this.id);
      });
      $('#analyze').button()
      .click(function() {
        $('#alog').load('/navigation/analyze');
      });
      $('#refresh').button()
      .click(function() {
        $('#navigationtree').jstree('refresh',-1);
      });
      $('#test').button();
      $('#seed').button();
    });

= render :file => 'shared/_ui_event_for.js.haml', :locals => { :domid => 'navigation', :url => '/navigation', :actions => {:update => "/edit"}}, :format => :json

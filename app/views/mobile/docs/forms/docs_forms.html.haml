-@title = "jQuery Mobile Docs - Forms"
= render :partial => "/mobile/index.js.haml", :format => :js

.type-interior{"data-role" => "page"}
  %div{"data-role" => "header", "data-theme" => "f"}
    %h1 Forms
    %a.ui-btn-right.jqm-home{"data-direction" => "reverse", "data-icon" => "home", "data-iconpos" => "notext", :href => "/mobile"} Home
  / /header
  %div{"data-role" => "content"}
    .content-primary
      %p jQuery Mobile provides a complete set of finger-friendly form elements that are based on native HTML form elements.
      %h2 Form structure
      %p
        All forms should be wrapped in a
        %code form
        tag that has an
        %code action
        and
        %code method
        that will handle the form data processing on the server.
      %code
        \&lt;form action=&quot;form.php&quot; method=&quot;post&quot;&gt;
        \...
        \&lt;/form&gt;
      %h2 Markup conventions
      %p
        When constructing forms to be used in jQuery Mobile, most of the standard guidelines used to create forms that submit via normal HTTP post or get still apply. However, one thing to keep in mind is that the
        %code id
        attributes of form controls need to be not only unique on a given page, but also unique across the pages in a site. This is because jQuery Mobile's single-page navigation model allows many different "pages" to be present in the DOM at the same time, so you must be careful to use unique
        %code id
        attributes so there will be only one of each in the DOM (and of course, be sure to pair them properly with
        %code label
        elements via the
        %code for
        attribute).
      %h2 Hiding labels accessibly
      %p
        For the sake of accessibility, jQuery Mobile requires that all form elements be paired with a meaningful
        = succeed "." do
          %code label
        To hide labels in a way that leaves them visible to assistive technologies—for example, when letting an element’s
        %code placeholder
        attribute serve as a label—apply the helper class
        %code ui-hidden-accessible
        to the label itself:
      %code
        %pre
          :preserve
            &lt;label for="username" class="ui-hidden-accessible"&gt;Username:&lt;/label&gt;
            &lt;input type="text" name="username" id="username" value="" placeholder="Username"/&gt;
      %p
        To hide labels within a field container and adjust the layout accordingly, add the class
        %code ui-hide-label
        to the field container as in the following:
      %code
        %pre
          :preserve
            &lt;div data-role="fieldcontain" class="ui-hide-label"&gt;
              &lt;label for="username">Username:&lt;/label&gt;
              &lt;input type="text" name="username" id="username" value="" placeholder="Username"/&gt;
            &lt;/div&gt;
      %p Both of the above examples will render as:
      .ui-hide-label{"data-role" => "fieldcontain"}
        %label{:for => "username"} Username:
        %input#username{:name => "username", :placeholder => "Username", :type => "text", :value => ""}/
      %p While the label will no longer be visible, it will be available to assisitive technologies such as screen readers.
      %h2 Disabling form elements
      %p
        All jQuery Mobile widgets can be disabled in the markup by adding the standard
        %code disabled
        attribute to the element, just like you would with native controls. Each form widget also has standard
        %code disable
        and
        %code enable
        methods that are documented with each form widget. Here are a few examples of disabled widgets. Note that you can disable form buttons, but not links with a role of button because links don't have a parallel disabled feature in HTML. If you need to disable a link-based button, it's possible to apply the same disabled class
        %code ui-disabled
        with JavaScript to the enhanced button markup generated to achieve this effect.
      %div{"data-role" => "fieldcontain"}
        %label{:for => "foo"} Text Input:
        %input#foo{:disabled => "", :name => "name", :type => "text", :value => ""}/
      %div{"data-role" => "fieldcontain"}
        %fieldset{"data-role" => "controlgroup"}
          %legend Gender:
          %input#radio-female{:disabled => "", :name => "gender", :type => "radio", :value => "f"}/
          %label{:for => "radio-female"} Female
          %input#radio-male{:disabled => "", :name => "gender", :type => "radio", :value => "m"}/
          %label{:for => "radio-male"} Male
      %div{"data-role" => "fieldcontain"}
        %label{:for => "flip-s"} Server status:
        %select#flip-s{"data-role" => "slider", :disabled => "", :name => "slider"}
          %option{:value => "off"} Off
          %option{:value => "on"} On
      %div{"data-role" => "fieldcontain"}
        %label.select{:for => "select-choice-x"} Shipping:
        %select#select-choice-x{:disabled => "", :name => "select-shipper"}
          %option
          %option{:value => "standard"} Standard
          %option{:value => "rush"} Rush
          %option{:value => "express"} Express
          %option{:value => "overnight"} Overnight
      %p
        Note that you can disable buttons created from
        %code button
        or
        = succeed "-based" do
          %code input
        markup, but not links with a role of button. Links don't have a parallel disabled feature in HTML, but if you need to disable a link-based button (or any element), it's possible to apply the disabled class
        %code ui-disabled
        yourself with JavaScript to achieve the same effect.
      %h2 Field containers
      %p
        To improve the styling to labels and form elements on wider screens, we recommend wrapping a
        %code div
        or
        = succeed "with" do
          %code fieldset
        the
        %code data-role="fieldcontain"
        attribute around each label/form element. This framework aligns the input and associated label side-by-side, and breaks to stacked block-level elements below ~480px. The framework will also add a thin bottom border to act as a field separator.
      %p For example:
      %pre
        %code
          :preserve
            &lt;div data-role=&quot;fieldcontain&quot;&gt;
              &lt;label for="name">Text Input:&lt;/label&gt;
              &lt;input type="text" name="name" id="name" value="" /&gt;
            &lt;/div&gt;
      %p Will render as:
      %div{"data-role" => "fieldcontain"}
        %label{:for => "name"} Text Input:
        %input#name{:name => "name", :type => "text", :value => ""}/
      %p
        For additional examples, see the
        %a{:href => "/mobile/docs/forms/forms_all"} form elements gallery
      %h2 Auto-initialization of form elements
      %p
        By default, jQuery Mobile will automatically enhance certain native form controls into rich touch-friendly components. This is handled internally by finding form elements by tag name and running a plugin method on them, so for instance, a
        %code select
        element will be found and initialized with the "selectmenu" plugin, while an
        %code input
        element with a
        %code type="checkbox"
        will be enhanced with the "checkboxradio" plugin. Once initialized, you can address these enhanced components programmatically through their jQuery UI widget API methods - see options, methods and events listed on each form plugin's documentation page for details.
      %h2 Initializing groups of dynamically-injected form elements
      %p
        If you should generate new markup client-side or load in content via AJAX and inject it into a page, you can trigger the
        %code create
        event to handle the auto-initialization for all the plugins contained within the new markup. This can be triggered on any element (even the page div itself), saving you the task of manually initializing each plugin (see below).
      %p For example, if a block of HTML markup (say a login form) was loaded in through Ajax, trigger the create event to automatically transform all the widgets it contains (inputs and buttons in this case) into the enhanced versions. The code for this scenario would be:
      %code
        $( ...new markup that contains widgets... ).appendTo( ".ui-page" ).trigger( "create" );
      %h2 Refreshing form elements
      %p
        In jQuery Mobile, some enhanced form controls are simply styled (inputs), but others are custom controls (selects, sliders) built from, and kept in sync with, the native control. To programmatically update a form control with JavaScript, first manipulate the native control, then use the
        %code refresh
        method to tell the enhanced control to update itself to match the new state. Here are some examples of how to update common form controls, then call the
        %code refresh
        method:
      %h4 Checkboxes:
      %code
        $("input[type='checkbox']").attr("checked",true).checkboxradio("refresh");
      %h4 Radios:
      %code
        $("input[type='radio']").attr("checked",true).checkboxradio("refresh");
      %h4 Selects:
      %code
        %pre
          :preserve
            var myselect = $("select#foo");
            myselect[0].selectedIndex = 3;
            myselect.selectmenu("refresh");
      %h4 Sliders:
      %code
        $("input[type=range]").val(60).slider("refresh");
      %h4 Flip switches (they use slider):
      %code
        %pre
          :preserve
            var myswitch = $("select#bar");
            myswitch[0].selectedIndex = 1;
            myswitch.slider("refresh");
      %h2 Preventing auto-initialization of form elements
      %p
        If you'd prefer that a particular form control be left untouched by jQuery Mobile, simply give that element the attribute
        = succeed "." do
          %code data-role="none"
        For example:
      %pre
        %code
          :preserve
            &lt;label for=&quot;foo&quot;&gt;
            &lt;select name=&quot;foo&quot; id=&quot;foo&quot; data-role=&quot;none&quot;&gt;
              &lt;option value="a" &gt;A&lt;/option&gt;
              &lt;option value="b" &gt;B&lt;/option&gt;
              &lt;option value="c" &gt;C&lt;/option&gt;
            &lt;/select&gt;
      %p
        Or, if you'd like to prevent auto-initialization without adding attributes to your markup, you can customize the selector that is used for preventing auto-initialization by setting the page plugin's
        %code keepNative
        option (which defaults to
        = succeed "." do
          %code [data-role="none"]
        Be sure to configure this option inside an event handler bound to the
        %code mobileinit
        event, so that it applies to the first page as well as subsequent pages that are loaded.
      %pre
        %code
          :preserve
            $(document).bind('mobileinit',function(){
              $.mobile.page.prototype.options.keepNative = "select, input.foo, textarea.bar";
            });
      %p
        One special case is that of selects. The above sample will prevent any and all augmentation from taking place on select elements in the page if
        %code select
        is included. If you wish to retain the native performance, look/feel of the menu itself and benefit from the visual augmentation of the select button by jQuery Mobile you can set $.mobile.nativeSelectMenu to true in a
        %code mobileinit
        callback as a global setting or use
        %code data-native="true"
        on a case by case basis.
    / /content-primary
    .content-secondary
      .ui-body-b
        %div{"data-collapsed" => "true", "data-content-theme" => "d", "data-role" => "collapsible", "data-theme" => "b"}
          %h3 More in this section
          %ul{"data-dividertheme" => "d", "data-role" => "listview", "data-theme" => "c"}
            %li{"data-role" => "list-divider"} Form elements
            %li{"data-theme" => "a"}
              %a{:href => "/mobile/docs/forms/docs_forms"} Form basics
            %li
              %a{:href => "/mobile/docs/forms/forms_all"} Form element gallery
            %li
              %a{:href => "/mobile/docs/forms/textinputs"} Text inputs
            %li
              %a{:href => "/mobile/docs/forms/search"} Search input
            %li
              %a{:href => "/mobile/docs/forms/slider"} Slider
            %li
              %a{:href => "/mobile/docs/forms/switch"} Flip toggle switch
            %li
              %a{:href => "/mobile/docs/forms/radiobuttons"} Radio buttons
            %li
              %a{:href => "/mobile/docs/forms/checkboxes"} Checkboxes
            %li
              %a{:href => "/mobile/docs/forms/selects"} Select menus
            %li
              %a{:href => "/mobile/docs/forms/forms_themes"} Theming forms
            %li
              %a{:href => "/mobile/docs/forms/forms_all_native"} Native form elements
            %li
              %a{:href => "/mobile/docs/forms/forms_sample"} Submitting forms
  / /content
  .footer-docs{"data-role" => "footer", "data-theme" => "c"}
    %p &copy; 2011 The jQuery Project
/ /page

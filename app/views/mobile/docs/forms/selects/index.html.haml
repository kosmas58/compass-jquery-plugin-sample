-@title = "jQuery Mobile Docs - Select"
= render :partial => "/mobile/index.js.haml", :format => :js

.type-interior{"data-role" => "page"}
  %div{"data-role" => "header", "data-theme" => "f"}
    %h1 Select Menus
    %a.ui-btn-right.jqm-home{"data-direction" => "reverse", "data-icon" => "home", "data-iconpos" => "notext", :href => "/mobile"} Home
  / /header
  %div{"data-role" => "content"}
    .content-primary
      %form{:action => "#", :method => "get"}
        %h2 Select menus
        %ul.localnav{"data-role" => "controlgroup", "data-type" => "horizontal"}
          %li
            %a.ui-btn-active{"data-role" => "button", "data-transition" => "fade", :href => "/mobile/docs/forms/selects"} Basics
          %li
            %a{"data-role" => "button", "data-transition" => "fade", :href => "/mobile/docs/forms/selects/custom"} Custom
          %li
            %a{"data-role" => "button", "data-transition" => "fade", :href => "/mobile/docs/forms/selects/options"} Options
          %li
            %a{"data-role" => "button", "data-transition" => "fade", :href => "/mobile/docs/forms/selects/methods"} Methods
          %li
            %a{"data-role" => "button", "data-transition" => "fade", :href => "/mobile/docs/forms/selects/events"} Events
        %p
          The select menu is based on a native
          %code select
          element, which is hidden from view and replaced with a custom-styled select button that matches the look and feel of the jQuery Mobile framework. The select menu is ARIA-enabled and keyboard accessible on the desktop as well. View the
          %a{:href => "/mobile/docs/api/data_attributes"} data- attribute reference
          to see all the possible attributes you can add to selects.
        %p
          By default, the framework leverages the native OS options menu to use with the custom button. When the button is clicked, the native OS menu will open. When a value is selected and the menu closes, the custom button's text is updated to match the selected value. Please note that the framework also offers the possibility of having custom (non-native) select menus, see details at the bottom of this page and on the
          %a{:href => "/mobile/docs/api/custom"} custom select menu
          page.
        %p
          To add a select menu to your page, start with a standard
          %code select
          element populated with a set of
          %code option
          elements. Set the
          %code for
          attribute of the
          %code label
          to match the ID of the
          %code select
          so they are semantically associated. It's possible to
          %a{:href => "/mobile/docs/docs_forms"} accessibly hide the label
          if it's not desired in the page layout, but we require that it is present in the markup for semantic and accessibility reasons.
        %p
          The framework will find all
          %code select
          elements and automatically enhance them into select menus, no need to apply a
          %code data-role
          attribute. To prevent the automatic enhancement of a select, add
          %code data-role="none"
          attribute to the
          = succeed "." do
            %code select
        %pre
          %code
            :preserve
              &lt;label for=&quot;select-choice-0&quot; class=&quot;select&quot;&gt;Shipping method:&lt;/label&gt;
              &lt;select name=&quot;select-choice-0&quot; id=&quot;select-choice-1&quot;&gt;
                &lt;option value=&quot;standard&quot;&gt;Standard: 7 day&lt;/option&gt;
                &lt;option value=&quot;rush&quot;&gt;Rush: 3 days&lt;/option&gt;
                &lt;option value=&quot;express&quot;&gt;Express: next day&lt;/option&gt;
                &lt;option value=&quot;overnight&quot;&gt;Overnight&lt;/option&gt;
              &lt;/select&gt;
        %p This will produce a basic select menu. The default styles set the width of the input to 100% of the parent container and stacks the label on a separate line.
        %label.select{:for => "select-choice-0"} Shipping method:
        %select#select-choice-1{:name => "select-choice-0"}
          %option{:value => "standard"} Standard: 7 day
          %option{:value => "rush"} Rush: 3 days
          %option{:value => "express"} Express: next day
          %option{:value => "overnight"} Overnight
        %p
          Optionally wrap the selects in a container with the
          %code data-role="fieldcontain"
          attribute to help visually group it in a longer form.
        %pre
          %code
            :preserve
              &lt;div data-role=&quot;fieldcontain&quot;&gt;
                &lt;label for=&quot;select-choice-1&quot; class=&quot;select&quot;&gt;Shipping method:&lt;/label&gt;
                &lt;select name=&quot;select-choice-1&quot; id=&quot;select-choice-1&quot;&gt;
                  &lt;option value=&quot;standard&quot;&gt;Standard: 7 day&lt;/option&gt;
                  &lt;option value=&quot;rush&quot;&gt;Rush: 3 days&lt;/option&gt;
                  &lt;option value=&quot;express&quot;&gt;Express: next day&lt;/option&gt;
                  &lt;option value=&quot;overnight&quot;&gt;Overnight&lt;/option&gt;
                &lt;/select&gt;
              &lt;/div&gt;
        %p The select input is now displayed like this:
        %div{"data-role" => "fieldcontain"}
          %label.select{:for => "select-choice-1"} Shipping method:
          %select#select-choice-1{:name => "select-choice-1"}
            %option{:value => "standard"} Standard: 7 day
            %option{:value => "rush"} Rush: 3 days
            %option{:value => "express"} Express: next day
            %option{:value => "overnight"} Overnight
        %p An example of a select with a long list of options:
        %div{"data-role" => "fieldcontain"}
          %label.select{:for => "select-choice-2"} Your state:
          %select#select-choice-2{:name => "select-choice-2"}
            %option{:value => "AL"} Alabama
            %option{:value => "AK"} Alaska
            %option{:value => "AZ"} Arizona
            %option{:value => "AR"} Arkansas
            %option{:value => "CA"} California
            %option{:value => "CO"} Colorado
            %option{:value => "CT"} Connecticut
            %option{:value => "DE"} Delaware
            %option{:value => "FL"} Florida
            %option{:value => "GA"} Georgia
            %option{:value => "HI"} Hawaii
            %option{:value => "ID"} Idaho
            %option{:value => "IL"} Illinois
            %option{:value => "IN"} Indiana
            %option{:value => "IA"} Iowa
            %option{:value => "KS"} Kansas
            %option{:value => "KY"} Kentucky
            %option{:value => "LA"} Louisiana
            %option{:value => "ME"} Maine
            %option{:value => "MD"} Maryland
            %option{:value => "MA"} Massachusetts
            %option{:value => "MI"} Michigan
            %option{:value => "MN"} Minnesota
            %option{:value => "MS"} Mississippi
            %option{:value => "MO"} Missouri
            %option{:value => "MT"} Montana
            %option{:value => "NE"} Nebraska
            %option{:value => "NV"} Nevada
            %option{:value => "NH"} New Hampshire
            %option{:value => "NJ"} New Jersey
            %option{:value => "NM"} New Mexico
            %option{:value => "NY"} New York
            %option{:value => "NC"} North Carolina
            %option{:value => "ND"} North Dakota
            %option{:value => "OH"} Ohio
            %option{:value => "OK"} Oklahoma
            %option{:value => "OR"} Oregon
            %option{:value => "PA"} Pennsylvania
            %option{:value => "RI"} Rhode Island
            %option{:value => "SC"} South Carolina
            %option{:value => "SD"} South Dakota
            %option{:value => "TN"} Tennessee
            %option{:value => "TX"} Texas
            %option{:value => "UT"} Utah
            %option{:value => "VT"} Vermont
            %option{:value => "VA"} Virginia
            %option{:value => "WA"} Washington
            %option{:value => "WV"} West Virginia
            %option{:value => "WI"} Wisconsin
            %option{:value => "WY"} Wyoming
        /
          <p>The following example organizes the options into <code>optgroup</code> elements:</p>

          <div data-role="fieldcontain">
          <label for="select-choice-nc" class="select">Preferred delivery:</label>
          <select name="select-choice-8" id="select-choice-nc">
          <optgroup label="FedEx">
          <option value="firstOvernight">First Overnight</option>
          <option value="expressSaver">Express Saver</option>
          <option value="ground">Ground</option>
          </optgroup>
          <optgroup label="UPS">
          <option value="firstOvernight">First Overnight</option>
          <option value="expressSaver">Express Saver</option>
          <option value="ground">Ground</option>
          </optgroup>
          <optgroup label="US Mail">
          <option value="standard">Standard: 7 day</option>
          <option value="rush">Rush: 3 days</option>
          <option value="express">Express: next day (disabled)</option>
          <option value="overnight">Overnight</option>
          </optgroup>
          </select>
          </div>
        %h2 Vertically grouped select inputs
        %p
          To create a grouped set of select inputs, first add
          %code select
          and a corresponding
          = succeed "." do
            %code label
          Set the
          %code for
          attribute of the
          %code label
          to match the ID of the
          %code select
          so they are semantically associated.
        %p
          Because the
          %code label
          element will be associated with each individual select input, we recommend wrapping the selects in a
          %code fieldset
          element that has a
          %code legend
          which acts as the combined label for the grouped inputs.
        %p
          Lastly, one needs to wrap the
          %code fieldset
          in a
          %code div
          with
          %code data-role="controlgroup"
          attribute, so it can be styled as a group.
        %pre
          %code
            :preserve
              &lt;div data-role=&quot;fieldcontain&quot;&gt;
                &lt;fieldset data-role=&quot;controlgroup&quot;&gt;
                  &lt;legend&gt;Date of Birth:&lt;/legend&gt;

                  &lt;label for="select-choice-month">Month&lt;/label&gt;
                    &lt;select name="select-choice-month" id="select-choice-month"&gt;
                      &lt;option&gt;Month&lt;/option&gt;
                      &lt;option value="jan"&gt;January&lt;/option&gt;
                      &lt;!-- etc. --&gt;
                    &lt;/select&gt;

                  &lt;label for="select-choice-day">Day&lt;/label&gt;
                  &lt;select name="select-choice-day" id="select-choice-day"&gt;
                    &lt;option&gt;Day&lt;/option&gt;
                    &lt;option value="1"&gt;1&lt;/option&gt;
                    &lt;!-- etc. --&gt;
                  &lt;/select&gt;

                  &lt;label for="select-choice-year">Year&lt;/label&gt;
                  &lt;select name="select-choice-year" id="select-choice-year"&gt;
                    &lt;option&gt;Year&lt;/option&gt;
                    &lt;option value="2011"&gt;2011&lt;/option&gt;
                    &lt;!-- etc. --&gt;
                  &lt;/select&gt;
                &lt;/fieldset&gt;
              &lt;/div&gt;
        %div{"data-role" => "fieldcontain"}
          %fieldset{"data-role" => "controlgroup"}
            %legend Date of Birth:
            %label{:for => "select-choice-month"} Month
            %select#select-choice-month{:name => "select-choice-month"}
              %option Month
              %option{:value => "jan"} January
              %option{:value => "dec"} December
              %option{:value => "feb"} February
              %option{:value => "mar"} March
              %option{:value => "apr"} April
              %option{:value => "may"} May
              %option{:value => "jun"} June
              %option{:value => "jul"} July
              %option{:value => "aug"} August
              %option{:value => "sep"} September
              %option{:value => "oct"} October
              %option{:value => "nov"} November
              %option{:value => "dec"} December
            %label{:for => "select-choice-day"} Day
            %select#select-choice-day{:name => "select-choice-day"}
              %option Day
              %option{:value => "1"} 1
              %option{:value => "2"} 2
              %option{:value => "3"} 3
              %option{:value => "4"} 4
              %option{:value => "5"} 5
              %option{:value => "6"} 6
              %option{:value => "7"} 7
            %label{:for => "select-choice-year"} Year
            %select#select-choice-year{:name => "select-choice-year"}
              %option Year
              %option{:value => "2011"} 2011
              %option{:value => "2010"} 2010
              %option{:value => "2009"} 2009
              %option{:value => "2008"} 2008
              %option{:value => "2007"} 2007
              %option{:value => "2006"} 2006
              %option{:value => "2005"} 2005
              %option{:value => "2004"} 2004
        %h2 Horizontally grouped select inputs
        %p
          Select inputs can also be used for grouped sets with more than one related selections. To make a horizontal button set, add the
          %code data-type="horizontal"
          to the fieldset. Note that the buttons which trigger the select will resize depending on the currently selected option’s value. Note that browsers without support for
          %code display: inline-block;
          will group the selects vertically, as above.
        %code
          \&lt;fieldset data-role="controlgroup"
          = succeed "&amp;gt;" do
            %strong data-type="horizontal"
        %fieldset{"data-role" => "controlgroup", "data-type" => "horizontal"}
          %legend Date of Birth:
          %label{:for => "select-choice-month"} Month
          %select#select-choice-month{:name => "select-choice-month"}
            %option Month
            %option{:value => "jan"} January
            %option{:value => "dec"} December
            %option{:value => "feb"} February
            %option{:value => "mar"} March
            %option{:value => "apr"} April
            %option{:value => "may"} May
            %option{:value => "jun"} June
            %option{:value => "jul"} July
            %option{:value => "aug"} August
            %option{:value => "sep"} September
            %option{:value => "oct"} October
            %option{:value => "nov"} November
            %option{:value => "dec"} December
          %label{:for => "select-choice-day"} Day
          %select#select-choice-day{:name => "select-choice-day"}
            %option Day
            %option{:value => "1"} 1
            %option{:value => "2"} 2
            %option{:value => "3"} 3
            %option{:value => "4"} 4
            %option{:value => "5"} 5
            %option{:value => "6"} 6
            %option{:value => "7"} 7
          %label{:for => "select-choice-year"} Year
          %select#select-choice-year{:name => "select-choice-year"}
            %option Year
            %option{:value => "2011"} 2011
            %option{:value => "2010"} 2010
            %option{:value => "2009"} 2009
            %option{:value => "2008"} 2008
            %option{:value => "2007"} 2007
            %option{:value => "2006"} 2006
            %option{:value => "2005"} 2005
            %option{:value => "2004"} 2004
        %h2 Calling the select menu plugin
        %p
          The select menu plugin will auto initialize on any page that contains a select menu, no need for a
          %code data-role
          attribute in the markup. However, you can directly call the select menu plugin on any selector, just like any normal jQuery plugin:
        %pre
          %code
            :preserve
              $('select').selectmenu();
      %h2 Theming selects
      %p
        You can specify any jQuery Mobile button
        %code data-
        attribute on a select element, too. In this example, we're setting the theme, icon and inline properties:
      %div{"data-role" => "fieldcontain"}
        %label.select{:for => "select-choice-11"} Actions
        %select#select-choice-11{"data-icon" => "gear", "data-inline" => "true", "data-native-menu" => "false", "data-theme" => "e", :name => "select-choice-11"}
          %option{:value => "edit"} Edit user
          %option{:value => "delete"} Delete user
      %p
        The
        %code data-overlay-theme
        attribute can be added to a select element to set the color of the overlay layer for the dialog-based custom select menus and the outer border of the smaller custom menus. By default, the content block colors for swatch A will be used for the overlays.
      %div{"data-role" => "fieldcontain"}
        %label.select{:for => "select-choice-15"} Size
        %select#select-choice-15{"data-native-menu" => "false", "data-overlay-theme" => "d", "data-theme" => "b", :name => "select-choice-15"}
          %option{:value => "t"} Tall
          %option{:value => "g"} Grande
          %option{:value => "v"} Vente
      %div{"data-role" => "fieldcontain"}
        %label.select{:for => "select-choice-13"} Choose state(s):
        %select#select-choice-13{"data-native-menu" => "false", "data-overlay-theme" => "e", "data-theme" => "a", :name => "select-choice-13"}
          %option Choose options
          %option{:value => "AL"} Alabama
          %option{:value => "AK"} Alaska
          %option{:value => "AZ"} Arizona
          %option{:value => "AR"} Arkansas
          %option{:value => "CA"} California
          %option{:value => "CO"} Colorado
          %option{:value => "CT"} Connecticut
          %option{:value => "DE"} Delaware
          %option{:value => "FL"} Florida
          %option{:value => "GA"} Georgia
          %option{:value => "HI"} Hawaii
          %option{:value => "ID"} Idaho
          %option{:value => "IL"} Illinois
          %option{:value => "IN"} Indiana
          %option{:value => "IA"} Iowa
          %option{:value => "KS"} Kansas
          %option{:value => "KY"} Kentucky
          %option{:value => "LA"} Louisiana
          %option{:value => "ME"} Maine
          %option{:value => "MD"} Maryland
          %option{:value => "MA"} Massachusetts
          %option{:value => "MI"} Michigan
          %option{:value => "MN"} Minnesota
          %option{:value => "MS"} Mississippi
          %option{:value => "MO"} Missouri
          %option{:value => "MT"} Montana
          %option{:value => "NE"} Nebraska
          %option{:value => "NV"} Nevada
          %option{:value => "NH"} New Hampshire
          %option{:value => "NJ"} New Jersey
          %option{:value => "NM"} New Mexico
          %option{:value => "NY"} New York
          %option{:value => "NC"} North Carolina
          %option{:value => "ND"} North Dakota
          %option{:value => "OH"} Ohio
          %option{:value => "OK"} Oklahoma
          %option{:value => "OR"} Oregon
          %option{:value => "PA"} Pennsylvania
          %option{:value => "RI"} Rhode Island
          %option{:value => "SC"} South Carolina
          %option{:value => "SD"} South Dakota
          %option{:value => "TN"} Tennessee
          %option{:value => "TX"} Texas
          %option{:value => "UT"} Utah
          %option{:value => "VT"} Vermont
          %option{:value => "VA"} Virginia
          %option{:value => "WA"} Washington
          %option{:value => "WV"} West Virginia
          %option{:value => "WI"} Wisconsin
          %option{:value => "WY"} Wyoming
      %h2 Custom select menus
      %p
        For the sake of advanced styling, the framework also offers a method of generating
        %a{:href => "/mobile/docs/forms/selects/custom"} custom menus
        from existing select menu markup  instead of the native OS menu. The custom menu supports disabled options and multiple selection (whereas native mobile OS support for both is inconsistent), adds an elegant way to handle placeholder values, and restores missing functionality on certain platforms such as
        %code optgroup
        support on Android.
        %div{:align => "right"}
          %a{:align => "right", "data-icon" => "arrow-r", "data-iconpos" => "right", "data-inline" => "true", "data-role" => "button", :href => "/mobile/docs/forms/selects/custom"} Custom select menu docs
    / /content-primary
    .content-secondary
      .ui-body-b
        %div{"data-collapsed" => "true", "data-content-theme" => "d", "data-role" => "collapsible", "data-theme" => "b"}
          %h3 More in this section
          %ul{"data-dividertheme" => "d", "data-role" => "listview", "data-theme" => "c"}
            %li{"data-role" => "list-divider"} Form elements
            %li
              %a{:href => "/mobile/docs/forms/docs_forms"} Form basics
            %li
              %a{:href => "/mobile/docs/forms/all"} Form element gallery
            %li
              %a{:href => "/mobile/docs/forms/textinputs"} Text inputs
            %li
              %a{:href => "/mobile/docs/forms/search"} Search input
            %li
              %a{:href => "/mobile/docs/forms/slider"} Slider
            %li
              %a{:href => "/mobile/docs/forms/switch"} Flip toggle switch
            %li
              %a{:href => "/mobile/docs/forms/radiobuttons"} Radio buttons
            %li
              %a{:href => "/mobile/docs/forms/checkboxes"} Checkboxes
            %li{"data-theme" => "a"}
              %a{:href => "/mobile/docs/forms/selects"} Select menus
            %li
              %a{:href => "/mobile/docs/forms/themes"} Theming forms
            %li
              %a{:href => "/mobile/docs/forms/all_native"} Native form elements
            %li
              %a{:href => "/mobile/docs/forms/sample"} Submitting forms
  / /content
  .footer-docs{"data-role" => "footer", "data-theme" => "c"}
    %p &copy; 2011 The jQuery Project
/ /page

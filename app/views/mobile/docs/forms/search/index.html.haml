-@title = "jQuery Mobile Docs - Search Input"
= render :partial => "/mobile/index.js.haml", :format => :js

.type-interior{"data-role" => "page"}
  %div{"data-role" => "header", "data-theme" => "f"}
    %h1 Search input
    %a.ui-btn-right.jqm-home{"data-direction" => "reverse", "data-icon" => "home", "data-iconpos" => "notext", :href => "/mobile"} Home
  / /header
  %div{"data-role" => "content"}
    .content-primary
      %form{:action => "#", :method => "get"}
        %h2 Search input
        %ul.localnav{"data-role" => "controlgroup", "data-type" => "horizontal"}
          %li
            %a.ui-btn-active{"data-role" => "button", "data-transition" => "fade", :href => "/mobile/docs/forms/search"} Basics
          %li
            %a{"data-role" => "button", "data-transition" => "fade", :href => "/mobile/docs/forms/search/options"} Options
          %li
            %a{"data-role" => "button", "data-transition" => "fade", :href => "/mobile/docs/forms/search/methods"} Methods
          %li
            %a{"data-role" => "button", "data-transition" => "fade", :href => "/mobile/docs/forms/search/events"} Events
        %p
          Search inputs are a new HTML type that is styled with pill-shaped corners and adds a "x" icon to clear the field once you start typing. Start with an
          %code input
          with a
          %code type="search"
          attribute in your markup.
        %p
          Set the
          %code for
          attribute of the
          %code label
          to match the ID of the
          %code input
          so they are semantically associated. It's possible to
          %a{:href => "/mobile/docs/forms/docs_forms"} accessibly hide the label
          if it's not desired in the page layout, but we require that it is present in the markup for semantic and accessibility reasons.
        %pre
          %code
            :preserve
              &lt;label for=&quot;search-basic&quot;&gt;Search Input:&lt;/label&gt;
              &lt;input type=&quot;search&quot; name=&quot;search&quot; id=&quot;searc-basic&quot; value=&quot;&quot;/&gt;
        %p This will produce a basic search input. The default styles set the width of the input to 100% of the parent container and stacks the label on a separate line.
        %label{:for => "search-basic"} Search Input:
        %input#search-basic{:name => "search", :type => "search", :value => ""}
        %p
          Optionally wrap the search input in a container with the
          %code data-role="fieldcontain"
          attribute to help visually group it in a longer form.
        %pre
          %code
            :preserve
              &lt;div data-role=&quot;fieldcontain&quot;&gt;
                &lt;label for=&quot;search&quot;&gt;Search Input:&lt;/label&gt;
                &lt;input type=&quot;search&quot; name=&quot;password&quot; id=&quot;search&quot; value=&quot;&quot;/&gt;
              &lt;/div&gt;
        %p The search input is now displayed like this:
        %div{"data-role" => "fieldcontain"}
          %label{:for => "search"} Search Input:
          %input#search{:name => "search2", :type => "search", :value => ""}/
        %p Themed variation:
        %div{"data-role" => "fieldcontain"}
          %label{:for => "searchA"} Search Input:
          %input#searchA{"data-theme" => "a", :name => "search3", :type => "search", :value => ""}/
        %h2 Calling the textinput plugin
        %p
          This plugin will auto initialize on any page that contains a text input with the
          %code type="search"
          attribute, no need for a
          %code data-role
          attribute in the markup. However, if needed you can directly call the
          %code textinput
          plugin on a selector, just like any jQuery plugin:
        %pre
          %code
            :preserve
              $('.mySearchInput').textinput();
    / /content-primary
    .content-secondary
      .ui-body-b
        %div{"data-collapsed" => "true", "data-content-theme" => "d", "data-role" => "collapsible", "data-theme" => "b"}
          %h3 More in this section
          %ul{"data-dividertheme" => "d", "data-role" => "listview", "data-theme" => "c"}
            %li{"data-role" => "list-divider"} Form elements
            %li
              %a{:href => "/mobile/docs/forms/docs_forms"} Form basics
            %li
              %a{:href => "/mobile/docs/forms/all"} Form element gallery
            %li
              %a{:href => "/mobile/docs/forms/textinputs"} Text inputs
            %li{"data-theme" => "a"}
              %a{:href => "/mobile/docs/forms/search"} Search input
            %li
              %a{:href => "/mobile/docs/forms/slider"} Slider
            %li
              %a{:href => "/mobile/docs/forms/switch"} Flip toggle switch
            %li
              %a{:href => "/mobile/docs/forms/radiobuttons"} Radio buttons
            %li
              %a{:href => "/mobile/docs/forms/checkboxes"} Checkboxes
            %li
              %a{:href => "/mobile/docs/forms/selects"} Select menus
            %li
              %a{:href => "/mobile/docs/forms/themes"} Theming forms
            %li
              %a{:href => "/mobile/docs/forms/all_native"} Native form elements
            %li
              %a{:href => "/mobile/docs/forms/sample"} Submitting forms
  / /content
  .footer-docs{"data-role" => "footer", "data-theme" => "c"}
    %p &copy; 2011 The jQuery Project
/ /page

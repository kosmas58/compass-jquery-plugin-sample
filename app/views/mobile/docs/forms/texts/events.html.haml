-@title = "jQuery Mobile Docs - Text inputs"
= render :partial => "/mobile/index.js.haml", :format => :js

.type-interior{"data-role" => "page"}
  %div{"data-role" => "header", "data-theme" => "f"}
    %h1 Text inputs
    %a.ui-btn-right.jqm-home{"data-direction" => "reverse", "data-icon" => "home", "data-iconpos" => "notext", :href => "/mobile"} Home
  / /header
  %div{"data-role" => "content"}
    .content-primary
      %form{:action => "#", :method => "get"}
        %h2 Text inputs
        %ul.localnav{"data-role" => "controlgroup", "data-type" => "horizontal"}
          %li
            %a{"data-role" => "button", "data-transition" => "fade", :href => "/mobile/docs/texts/selects"} Basics
          %li
            %a{"data-role" => "button", "data-transition" => "fade", :href => "/mobile/docs/forms/texts/options"} Options
          %li
            %a{"data-role" => "button", "data-transition" => "fade", :href => "/mobile/docs/forms/texts/methods"} Methods
          %li
            %a.ui-btn-active{"data-role" => "button", "data-transition" => "fade", :href => "/mobile/docs/forms/texts/events"} Events
        %p Since the native text inputs and textareas are used as a proxy for the custom text inputs, you can watch for events on the original, native text input and textareas instead of needing to go through the text input plugin. Bind to the change event by type: change, blur, focus, keypress, click, etc.
        %pre
          %code
            :preserve

              $( ".selector" ).bind( "change", function(event, ui) {
                ...
              });
        %p The text input plugin has the following custom events:
        %dl
          %dt
            %code create
            triggered when a text input is created
          %dd
            %p This event is used to find out when a custom text input was created. It is not used to create a custom text input. The text input create event can be used like this:
            %pre
              %code
                :preserve
                  $( ".selector" ).textinput({
                     create: function(event, ui) { ... }
                  });
    / /content-primary
    .content-secondary
      .ui-body-b
        %div{"data-collapsed" => "true", "data-role" => "collapsible", "data-theme" => "b"}
          %h3 More in this section
          %ul{"data-dividertheme" => "d", "data-role" => "listview", "data-theme" => "c"}
            %li{"data-role" => "list-divider"} Form elements
            %li
              %a{:href => "/mobile/docs/forms/docs_forms"} Form basics
            %li
              %a{:href => "/mobile/docs/forms/forms_all"} Form element gallery
            %li{"data-theme" => "a"}
              %a{:href => "/mobile/docs/forms/texts"} Text inputs
            %li
              %a{:href => "/mobile/docs/forms/forms_search"} Search inputs
            %li
              %a{:href => "/mobile/docs/forms/sliders"} Sliders
            %li
              %a{:href => "/mobile/docs/forms/forms_switch"} Flip toggle switch
            %li
              %a{:href => "/mobile/docs/forms/radiobuttons"} Radio buttons
            %li
              %a{:href => "/mobile/docs/forms/checkboxes"} Checkboxes
            %li
              %a{:href => "/mobile/docs/forms/selects"} Select menus
            %li
              %a{:href => "/mobile/docs/forms/forms_themes"} Theming forms
            %li
              %a{:href => "/mobile/docs/forms/forms_all_native"} Native form elements
            %li
              %a{:href => "/mobile/docs/forms/forms_sample"} Submitting forms
            %li
              %a{:href => "/mobile/docs/forms/plugin_eventsmethods"} Plugin methods
  / /content
  .footer-docs{"data-role" => "footer", "data-theme" => "c"}
    %p &copy; 2011 The jQuery Project
/ /page
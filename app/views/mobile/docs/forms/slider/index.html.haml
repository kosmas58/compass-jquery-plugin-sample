-@title = "jQuery Mobile Docs - Slider"
= render :partial => "/mobile/index.js.haml", :format => :js

.type-interior{"data-role" => "page"}
  %div{"data-role" => "header", "data-theme" => "f"}
    %h1 Slider
    %a.ui-btn-right.jqm-home{"data-direction" => "reverse", "data-icon" => "home", "data-iconpos" => "notext", :href => "/mobile"} Home
  / /header
  %div{"data-role" => "content"}
    .content-primary
      %form{:action => "#", :method => "get"}
        %h2 Slider
        %ul.localnav{"data-role" => "controlgroup", "data-type" => "horizontal"}
          %li
            %a.ui-btn-active{"data-role" => "button", "data-transition" => "fade", :href => "/mobile/docs/forms/slider"} Basics
          %li
            %a{"data-role" => "button", "data-transition" => "fade", :href => "/mobile/docs/forms/slider/options"} Options
          %li
            %a{"data-role" => "button", "data-transition" => "fade", :href => "/mobile/docs/forms/slider/methods"} Methods
          %li
            %a{"data-role" => "button", "data-transition" => "fade", :href => "/mobile/docs/forms/slider/events"} Events
        %p
          To add a slider widget to your page, use a standard
          %code input
          with the
          %code type="range"
          attribute.  The input's
          %code value
          is used to configure the starting position of the handle and the value populated in the text input. Specify
          %code min
          and
          %code max
          attribute values to set the slider's range. The framework will parse these attributes to configure the slider widget.
        %p As you drag the slider's handle, the framework will update the native input's value (and vice-versa) so they are always in sync; this ensures that the value is submitted with the form.
        %p
          Set the
          %code for
          attribute of the
          %code label
          to match the ID of the
          %code input
          so they are semantically associated. It's possible to
          %a{:href => "/mobile/docs/forms/docs_forms"} accessibly hide the label
          if it's not desired in the page layout, but we require that it is present in the markup for semantic and accessibility reasons.
        %p
          The framework will find all
          %code inputs
          elements with a
          %code type="range"
          and automatically enhance them into a slider with an accompanying input, no need to apply a
          %code data-role
          attribute. To prevent the automatic enhancement of this input into a slider, add
          %code data-role="none"
          attribute to the
          = succeed "." do
            %code input
        and wrap them in a
        %code div
        with the
        %code data-role="fieldcontain"
        attribute to group them.
        %pre
          %code
            :preserve
               &lt;label for=&quot;slider-0&quot;&gt;Input slider:&lt;/label&gt;
               &lt;input type=&quot;range&quot; name=&quot;slider&quot; id=&quot;slider-0&quot; value=&quot;25&quot; min=&quot;0&quot; max=&quot;100&quot;  /&gt;
        %p The default slider is displayed like this:
        %label{:for => "slider-0"} Input slider:
        %input#slider-0{:max => "100", :min => "0", :name => "slider-1", :type => "range", :value => "25"}/
        %p
          Optionally wrap the slider markup in a container with the
          %code data-role="fieldcontain"
          attribute to help visually group it in a longer form.
        %pre
          %code
            :preserve
              &lt;div data-role=&quot;fieldcontain&quot;&gt;
                &lt;label for=&quot;slider&quot;&gt;Input slider:&lt;/label&gt;
                &lt;input type=&quot;range&quot; name=&quot;slider&quot; id=&quot;slider&quot; value=&quot;25&quot; min=&quot;0&quot; max=&quot;100&quot;  /&gt;
              &lt;/div&gt;
        %p The slider is now be is displayed like this:
        %div{"data-role" => "fieldcontain"}
          %label{:for => "slider-1"} Input slider:
          %input#slider-1{:max => "100", :min => "0", :name => "slider-1", :type => "range", :value => "25"}/
        %p Sliders also respond to key commands. Right Arrow, Up Arrow, and Page Up keys increase the value; Left Arrow, Down Arrow, and Page Down keys decrease it. To move the slider to its minimum or maximum value, use the Home or End key, respectively.
        %h2 Calling the slider plugin
        %p
          This plugin will auto initialize on any page that contains a text
          %code input
          with the
          %code type="range"
          attribute. However, if needed you can directly call the
          %code slider
          plugin on any selector, just like any jQuery plugin:
        %pre
          %code
            :preserve
              $('input').slider();
        %h2 Theming the slider
        %p
          To set the theme swatch for the slider, add a
          %code data-theme
          attribute to the
          %code input
          which will apply the theme to both the input, handle and track. The track swatch can be set separately by adding the
          %code data-track-theme
          attribute to apply the down state version of the selected button swatch.
        %pre
          %code
            :preserve
              &lt;div data-role=&quot;fieldcontain&quot;&gt;
                &lt;label for=&quot;slider-2&quot;&gt;Input slider:&lt;/label&gt;
                &lt;input type=&quot;range&quot; name=&quot;slider-2&quot; id=&quot;slider-1&quot; value=&quot;25&quot; min=&quot;0&quot; max=&quot;100&quot; data-theme=&quot;a&quot; data-track-theme=&quot;b&quot;/&gt;
              &lt;/div&gt;
        %p This will produce a themed slider:
        %div{"data-role" => "fieldcontain"}
          %label{:for => "slider-2"} Input slider:
          %input#slider-1{"data-theme" => "a", "data-track-theme" => "b", :max => "100", :min => "0", :name => "slider-2", :type => "range", :value => "25"}/
    / /content-primary
    .content-secondary
      .ui-body-b
        %div{"data-collapsed" => "true", "data-content-theme" => "d", "data-role" => "collapsible", "data-theme" => "b"}
          %h3 More in this section
          %ul{"data-dividertheme" => "d", "data-role" => "listview", "data-theme" => "c"}
            %li{"data-role" => "list-divider"} Form elements
            %li
              %a{:href => "/mobile/docs/forms/docs_forms"} Form basics
            %li
              %a{:href => "/mobile/docs/forms/forms_all"} Form element gallery
            %li
              %a{:href => "/mobile/docs/forms/textinputs"} Text inputs
            %li
              %a{:href => "/mobile/docs/forms/search"} Search input
            %li{"data-theme" => "a"}
              %a{:href => "/mobile/docs/forms/slider"} Slider
            %li
              %a{:href => "/mobile/docs/forms/switch"} Flip toggle switch
            %li
              %a{:href => "/mobile/docs/forms/radiobuttons"} Radio buttons
            %li
              %a{:href => "/mobile/docs/forms/checkboxes"} Checkboxes
            %li
              %a{:href => "/mobile/docs/forms/selects"} Select menus
            %li
              %a{:href => "/mobile/docs/forms/forms_themes"} Theming forms
            %li
              %a{:href => "/mobile/docs/forms/forms_all_native"} Native form elements
            %li
              %a{:href => "/mobile/docs/forms/forms_sample"} Submitting forms
  / /content
  .footer-docs{"data-role" => "footer", "data-theme" => "c"}
    %p &copy; 2011 The jQuery Project
/ /page

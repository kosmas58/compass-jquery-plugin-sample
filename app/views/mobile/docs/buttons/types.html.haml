-@title = "jQuery Mobile Docs - Button types"
= render :partial => "/mobile/index.js.haml", :format => :js

.type-interior{"data-role" => "page"}
  %div{"data-role" => "header", "data-theme" => "f"}
    %h1 Button basics
    %a.ui-btn-right.jqm-home{"data-direction" => "reverse", "data-icon" => "home", "data-iconpos" => "notext", :href => "/mobile"} Home
  / /header
  %div{"data-role" => "content"}
    .content-primary
      %h2 Button basics
      %ul.localnav{"data-role" => "controlgroup", "data-type" => "horizontal"}
        %li
          %a.ui-btn-active{"data-role" => "button", "data-transition" => "fade", :href => "/mobile/docs/buttons/types"} Basics
        %li
          %a{"data-role" => "button", "data-transition" => "fade", :href => "/mobile/docs/buttons/options"} Options
        %li
          %a{"data-role" => "button", "data-transition" => "fade", :href => "/mobile/docs/buttons/methods"} Methods
        %li
          %a{"data-role" => "button", "data-transition" => "fade", :href => "/mobile/docs/buttons/events"} Events
      %p
        Buttons are coded with standard HTML anchor and input elements, then enhanced by jQuery Mobile to make them more attractive and useable on a mobile device.  Use anchor links (
        %code a
        elements) to mark up navigation buttons, and
        %code input
        or
        %code button
        elements for form submission.
      %h2 Styling links as buttons
      %p
        In the main content block of a page, you can style any anchor link as a button by adding the
        %code data-role="button"
        attribute. The framework will enhance the link with markup and classes to style the link as a button. For example, this markup:
      %code
        \&lt;a href=&quot;index.html&quot; data-role=&quot;button&quot;&gt;Link button&lt;/a&gt;
      %p
        Produces this
        %strong link-based
        button:
      %a{"data-role" => "button", :href => "/mobile/docs/buttons"} Link button
      %p
        Links styled like buttons have all the same visual options as true form-based buttons below, but there are a few important differences. Link-based buttons aren't part of the
        %code button
        plugin and only just use the underlying
        %code buttonMarkup
        plugin to generate the button styles so the form button methods (enable, disable, refresh) aren't supported. If you need to disable a link-based button (or any element), it's possible to apply the disabled class ui-disabled yourself with JavaScript to achieve the same effect.
      %h2 Form buttons
      %p
        For ease of styling, the framework automatically converts any
        %code button
        or
        %code input
        element with a
        %code type
        of
        = succeed "," do
          %code submit
        = succeed "," do
          %code reset
        = succeed "," do
          %code button
        or
        %code image
        into a custom styled button &mdash; there is no need to add the
        %code data-role="button"
        attribute. However, if needed, you can directly call the button plugin on any selector, just like any jQuery plugin:
      %code
        $('[type='submit']').button();
      %p
        To preserve events bound to the original
        %code button
        or
        = succeed "," do
          %code input
        the framework hides the original element by making it transparent and positioning it over the new button markup.  When a user clicks on the the custom-styled button, they're actually clicking on the original element. To prevent a form button from being converted into an enhanced button, add the
        %code data-role="none"
        attribute and hte native control will be rendered.
      %p
        %strong Button
        based button:
      %button Button element
      %p
        %strong Input type="button"
        based button:
      %input{:type => "button", :value => "buttonBtn"}
      %p
        %strong Input type="submit"
        based button:
      %input{:type => "submit", :value => "submitBtn"}
      %p
        %strong Input type="reset"
        based button:
      %input{:type => "reset", :value => "resetBtn"}
      %p
        %strong Input type="image"
        based button:
      %input{:type => "image", :value => "imageBtn"}/
    / /content-primary
    .content-secondary
      .ui-body-b
        %div{"data-collapsed" => "true", "data-content-theme" => "d", "data-role" => "collapsible", "data-theme" => "b"}
          %h3 More in this section
          %ul{"data-dividertheme" => "d", "data-role" => "listview", "data-theme" => "c"}
            %li{"data-role" => "list-divider"} Buttons
            %li{"data-theme" => "a"}
              %a{:href => "/mobile/docs/buttons/types"} Button basics
            %li
              %a{:href => "/mobile/docs/buttons/buttons_icons"} Button icons
            %li
              %a{:href => "/mobile/docs/buttons/buttons_inline"} Inline buttons
            %li
              %a{:href => "/mobile/docs/buttons/buttons_grouped"} Grouped buttons
            %li
              %a{:href => "/mobile/docs/buttons/buttons_themes"} Theming buttons
  / /content
  .footer-docs{"data-role" => "footer", "data-theme" => "c"}
    %p &copy; 2011 The jQuery Project
/ /page

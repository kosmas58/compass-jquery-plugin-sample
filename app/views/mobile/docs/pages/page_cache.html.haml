-@title = "jQuery Mobile Docs - Prefetching &amp; caching pages"
= render :partial => "/mobile/index.js.haml", :format => :js

.type-interior{"data-role" => "page"}
  %div{"data-role" => "header", "data-theme" => "f"}
    %h1 Prefetching &amp; caching pages
    %a.ui-btn-right.jqm-home{"data-direction" => "reverse", "data-icon" => "home", "data-iconpos" => "notext", :href => "/mobile"} Home
  / /header
  %div{"data-role" => "content"}
    .content-primary
      %h2 Prefetching pages
      %p Usually, it's a good idea to store your app's pages in several single-page templates instead of one large multi-page template. This minimizes the size of the page's DOM.
      %p
        When using single-page templates, you can prefetch pages into the DOM so that they're available instantly when the user visits them. To prefetch a page, add the
        %code data-prefetch
        attribute to a link that points to the page. jQuery Mobile then loads the target page in the background after the primary page has loaded and the pagecreate event has triggered. For example:
      %pre
        %code
          :preserve
            &lt;a href="prefetchThisPage.html" data-prefetch&gt; ... &lt;/a&gt;
      %p
        You can prefetch as many linked pages as you like. Just add
        %code data-prefetch
        to all the links you want to prefetch.
      %p
        Alternatively, you can prefetch a page programmatically using
        = succeed ":" do
          %code $.mobile.loadPage()
      %pre
        %code
          :preserve
            $.mobile.loadPage(pageUrl);
      %p Another advantage of prefetching a page is that the user doesn't see the Ajax loading message when visiting the prefetched page. The Ajax loading message only appears if the framework hasn't finished prefetching the page by the time the link is followed.
      %p Prefetching pages naturally creates additional HTTP requests and uses bandwidth, so it's wise to use this feature only in situations where it's highly likely that the prefetched page will be visited. A common scenario is a photo gallery, where you can prefetch the "previous" and "next" photo pages so that the user can move quickly between photos.
      %h2 DOM size management
      %p For animated page transitions to work, the pages you're transitioning from and to both need to be in the DOM. However, keeping old pages in the DOM quickly fills the browser's memory, and can cause some mobile browsers to slow down or even crash.
      %p jQuery Mobile therefore has a simple mechanism to keep the DOM tidy. Whenever it loads a page via Ajax, jQuery Mobile flags the page to be removed from the DOM when you navigate away from it later (technically, on the pagehide event). If you revisit a removed page, the browser may be able to retrieve the page's HTML file from its cache. If not, it refetches the file from the server. (In the case of nested list views, jQuery Mobile removes all the pages that make up the nested list once you navigate to a page that's not part of the list.)
      %p Pages inside a multi-page template aren't affected by this feature at all - jQuery Mobile only removes pages loaded via Ajax.
      %h2 Caching pages in the DOM
      %p If you prefer, you can tell jQuery Mobile to keep previously-visited pages in the DOM instead of removing them. This lets you cache pages so that they're available instantly if the user returns to them.
      %p
        To keep all previously-visited pages in the DOM, set the
        %code domCache
        option on the page plugin to
        = succeed "," do
          %code true
        like this:
      %pre
        %code
          :preserve
            $.mobile.page.prototype.options.domCache = true;
      %p
        Alternatively, to cache just a particular page, you can add the
        %code data-dom-cache="true"
        attribute to the page's container:
      %pre
        %code
          :preserve
            &lt;div data-role="page" id="cacheMe" data-dom-cache="true"&gt;
      %p You can also cache a page programmatically like this:
      %pre
        %code
          %var> pageContainerElement
          \.page({ domCache: true });
      %p The drawback of DOM caching is that the DOM can get very large, resulting in slowdowns and memory issues on some devices. If you enable DOM caching, take care to manage the DOM yourself and test thoroughly on a range of devices.
    / /content-primary
    .content-secondary
      %div{"data-collapsed" => "true", "data-role" => "collapsible", "data-theme" => "b"}
        %h3 More in this section
        %ul{"data-dividertheme" => "d", "data-role" => "listview", "data-theme" => "c"}
          %li{"data-role" => "list-divider"} Pages &amp; Dialogs
          %li
            %a{:href => "/mobile/docs/pages/page_anatomy"} Anatomy of a page
          %li
            %a{"data-ajax" => "false", :href => "/mobile/docs/pages/page_template"} Single page template
          %li
            %a{"data-ajax" => "false", :href => "/mobile/docs/pages/multipage_template"} Multi-page template
          %li
            %a{:href => "/mobile/docs/pages/page_titles"} Page titles
          %li
            %a{:href => "/mobile/docs/pages/page_links"} Linking pages
          %li
            %a{"data-ajax" => "false", :href => "/mobile/docs/pages/page_transitions"} Page transitions
          %li
            %a{:href => "/mobile/docs/pages/page_dialogs"} Dialogs
          %li{"data-theme" => "a"}
            %a{:href => "/mobile/docs/pages/page_cache"} Prefetching &amp; caching pages
          %li
            %a{:href => "/mobile/docs/pages/page_navmodel"} Ajax, hashes &amp; history
          %li
            %a{:href => "/mobile/docs/pages/page_scripting"} Scripting pages
          %li
            %a{:href => "/mobile/docs/pages/pages_themes"} Theming pages
  / /content
  .footer-docs{"data-role" => "footer", "data-theme" => "c"}
    %p &copy; 2011 The jQuery Project
  / /page

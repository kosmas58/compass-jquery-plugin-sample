-@title = "jQuery Mobile Docs - Pages"

- content_for :content_custom_scripts do
  = render(:partial => "/mobile/index.js.haml", :format => :js)

%div{"data-role" => "page"}
  %div{"data-role" => "header", "data-theme" => "b"}
    %h1 Dialogs
    %a.ui-btn-right.jqm-home{"data-direction" => "reverse", "data-icon" => "home", "data-iconpos" => "notext", :href => "/mobile"} Home
  / /header
  .ui-body{"data-role" => "content"}
    %h2 Creating dialogs
    %p
      Any page can be presented as a modal dialog by adding the
      %code data-rel="dialog"
      attribute to the page anchor link. When the "dialog" attribute is applied, the framework adds styles to add rounded corners, margins around the page and a dark background to make the "dialog" appear to be suspended above the page.
    %p
      %code
        \&lt;a href=&quot;foo.html&quot; data-rel=&quot;dialog&quot;&gt;Open dialog&lt;/a&gt;
    %a{"data-inline" => "true", "data-rel" => "dialog", "data-role" => "button", "data-transition" => "pop", :href => "/mobile/docs/pages/dialog"} Open dialog
    %h2 Transitions
    %p
      By default, the dialog will open with a 'pop' transition.  Like all pages, you can specify any page transition you want
      on the dialog by adding the
      %code
        data-transition
      attribute to the link. To make it feel more dialog-like, we recommend specifying a transition of "pop", "slideup" or
      "flip".
    %code
      \&lt;a href=&quot;foo.html&quot; data-rel=&quot;dialog&quot; data-transition=&quot;pop&quot;&gt;Open dialog&lt;/a&gt;
    %div
      %a{"data-inline" => "true", "data-rel" => "dialog", "data-role" => "button", "data-transition" => "pop", :href => "/mobile/docs/pages/dialog"} data-transition="pop"
      %a{"data-inline" => "true", "data-rel" => "dialog", "data-role" => "button", "data-transition" => "slidedown", :href => "/mobile/docs/pages/dialog"} data-transition="slidedown"
      %a{"data-inline" => "true", "data-rel" => "dialog", "data-role" => "button", "data-transition" => "flip", :href => "/mobile/docs/pages/dialog"} data-transition="flip"
    %h2 Closing dialogs
    %p
      When any link is clicked within in a dialog, the framework will automatically close the dialog and transition to the requested page, just as if the dialog were a normal page. To create a "cancel" button in a dialog, just link to the page that triggered the dialog to open and add the
      %code data-rel="back"
      attribute to your link. This pattern of linking to the previous page is also usable in non-JS devices as well.
    %p
      For JavaScript-generated links, you can simply set the href attribute to "#" and use the
      %code data-rel="back"
      attribute. You can also call the dialog's
      %code close()
      method to programmatically close dialogs, for example:
      = succeed "." do
        %code $('.ui-dialog').dialog('close')
    %h3 Setting the close button text
    %p
      Just like the page plugin, you can set a dialog's close button text through option or data attribute. The option can be configured for all dialogs by binding to the
      %code mobileinit
      event and setting the
      %code $.mobile.dialog.prototype.options.closeBtnText
      property to a string of your choosing, or you can place the data attribute
      %code data-close-btn-text
      to configure the text from your markup.
    %h2 History &amp; Back button behavior
    %p Since dialogs are typically used to support actions within a page, the framework does not include dialogs in the hash state history tracking. This means that dialogs will not appear in your browsing history chronology when the Back button is clicked. For example, if you are on a page, click a link to open a dialog, close the dialog, then navigate to another page, if you were to click the browser's Back button at that point you will navigate back to the first page, not the dialog.
    %h2 Styling &amp; theming
    %p Dialogs can be styled with different themes, just like any page. Here is a different dialog design:
    %a{"data-inline" => "true", "data-rel" => "dialog", "data-role" => "button", "data-transition" => "pop", :href => "/mobile/docs/pages/dialog_alt"} An alternate color scheme
    %p And dialogs can be can used more like a control sheet to offer multiple buttons by removing the header:
    %a{"data-inline" => "true", "data-rel" => "dialog", "data-role" => "button", "data-transition" => "slidedown", :href => "/mobile/docs/pages/dialog_buttons"} Share photos...
  / /content
/ /page

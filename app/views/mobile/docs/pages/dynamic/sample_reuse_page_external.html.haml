!!!
%html
  %head
    %meta{:charset => "utf-8"}
      %meta{:content => "width=device-width", :name => "viewport"}
        %title changePage JSON Sample
        %link{:href => "../../../themes/default/", :rel => "stylesheet"}
          %script{:src => "../../../js/jquery.js"}
          %script{:src => "../../../js/"}
          :javascript
            // Some sample categorized data. This data is in-memory
            // for demonstration purposes, but could be loaded dynamically
            // via ajax.
            var categoryData = {
            	animals: {
            		name: "Animals",
            		description: "All your favorites from aardvarks to zebras.",
            		items: [
            			{
            				name: "Pets",
            			},
            			{
            				name: "Farm Animals",
            			},
            			{
            				name: "Wild Animals",
            			}
            		]
            	},
            	colors: {
            		name: "Colors",
            		description: "Fresh colors from the magic rainbow.",
            		items: [
            			{
            				name: "Blue",
            			},
            			{
            				name: "Green",
            			},
            			{
            				name: "Orange",
            			},
            			{
            				name: "Purple",
            			},
            			{
            				name: "Red",
            			},
            			{
            				name: "Yellow",
            			},
            			{
            				name: "Violet",
            			}
            		]
            	},
            	vehicles: {
            		name: "Vehicles",
            		description: "Everything from cars to planes.",
            		items: [
            			{
            				name: "Cars",
            			},
            			{
            				name: "Planes",
            			},
            			{
            				name: "Construction",
            			}
            		]
            	}
            };
            
            // Load the data for a specific category, based on
            // the URL passed in. Generate markup for the items in the
            // category, inject it into an embedded page, and then make
            // that page the current active page.
            function showCategory( url, options )
            {
            	var categoryName = url.replace(/^.*\/|\.html$/g, ""),
            
            		// Get the object that represents the category we
            		// are interested in. Note, that at this point we could
            		// instead fire off an ajax request to fetch the data, but
            		// for the purposes of this sample, it's already in memory.
            		category = categoryData[ categoryName ],
            
            		// The pages we use to display our content are already in
            		// the DOM. The id of the page we are going to write our
            		// content into is category-items
            		pageSelector = "#category-items";
            
            	if ( category ) {
            		// Get the page we are going to dump our content into.
            		var $page = $( pageSelector ),
            
            			// Get the header for the page.
            			$header = $page.children( ":jqmData(role=header)" ),
            
            			// Get the content area element for the page.
            			$content = $page.children( ":jqmData(role=content)" ),
            
            			// The markup we are going to inject into the content
            			// area of the page.
            			markup = "" + category.description + "",
            
            			// The array of items for this category.
            			cItems = category.items,
            
            			// The number of items in the category.
            			numItems = cItems.length;
            
            		// Generate a list item for each item in the category
            		// and add it to our markup.
            		for ( var i = 0; i < numItems; i++ ) {
            			markup += "" + cItems[i].name + "";
            		}
            		markup += "";
            
            		// Find the h1 element in our header and inject the name of
            		// the category into it.
            		$header.find( "h1" ).html( category.name );
            
            		// Inject the category items markup into the content element.
            		$content.html( markup );
            
            		// Pages are lazily enhanced. We call page() on the page
            		// element to make sure it is always enhanced before we
            		// attempt to enhance the listview markup we just injected.
            		// Subsequent calls to page() are ignored since a page/widget
            		// can only be enhanced once.
            		$page.page();
            
            		// Enhance the listview we just injected.
            		$content.find( ":jqmData(role=listview)" ).listview();
            
            		// We don't want the data-url of the page we just modified
            		// to be the url that shows up in the browser's location field,
            		// so set the dataUrl option to the URL for the category
            		// we just loaded.
            		options.dataUrl = url;
            
            		// Now call changePage() and tell it to switch to
            		// the page we just modified.
            		$.mobile.changePage( $page, options );
            	}
            }
            
             
            // Listen for any attempts to call changepage.
            $(document).bind( "pagebeforechange", function( e, data ) {
            	// We only want to handle changepage calls where the caller is
            	// asking us to load a page by URL.
            	var u = data.toPage;
            	if ( typeof u === "string" ) {
            		// We are being asked to load a page by URL, but we only
            		// want to handle URLs that request the data for a specific
            		// category.
            
            		if ( $.mobile.path.isExternal( u ) && u.match( /\/([^\/\.]+\.html)/ ) ) {
            
            			// We're being asked to display the items for a specific category.
            			// Call our internal method that builds the content for the category
            			// on the fly based on our in-memory category data structure.
            			showCategory( u, data.options );
            			
            			e.preventDefault();
            		}
            	}
            });
            
  %body
    %div{"data-role" => "page"}
      %div{"data-role" => "header"}
        %h1 Categories
      %div{"data-role" => "content"}
        %h2 Select a Category Below:
        %ul{"data-inset" => "true", "data-role" => "listview"}
          %li
            %a{:href => "animals.html"} Animals
          %li
            %a{:href => "colors.html"} Colors
          %li
            %a{:href => "vehicles.html"} Vehicles
    #category-items{"data-role" => "page"}
      %div{"data-role" => "header"}
        %h1
      %div{"data-role" => "content"}

-@title = "jQuery Mobile Docs - Events"
= render :partial => "/mobile/index.js.haml", :format => :js

.type-interior{"data-role" => "page"}
  %div{"data-role" => "header", "data-theme" => "f"}
    %h1 Events
    %a.ui-btn-right.jqm-home{"data-direction" => "reverse", "data-icon" => "home", "data-iconpos" => "notext", :href => "/mobile"} Home
  / /header
  %div{"data-role" => "content"}
    .content-primary
      %p
        jQuery Mobile offers several custom events that build upon native events to create useful hooks for development. Note that these events employ various touch, mouse, and window events, depending on event existence, so you can bind to them for use in both handheld and desktop environments. You can bind to these events like you would with other jQuery events, using
        %code live()
        or
        = succeed "." do
          %code bind()
      .ui-body.ui-body-e
        %h4{:style => "margin:.5em 0"} Important: Use pageInit(), not $(document).ready()
        The first thing you learn in jQuery is to call code inside the $(document).ready() function so everything will execute as soon as the DOM is loaded. However, in jQuery Mobile, Ajax is used to load the contents of each page into the DOM as you navigate, and the DOM ready handler only executes for the first page. To execute code whenever a new page is loaded and created, you can bind to the
        %code
          %strong pageinit
        event. This event is explained in detail at the bottom of this page.
      %p
        .ui-body.ui-body-e
          %h4{:style => "margin:.5em 0"} Important: pageCreate() vs pageInit()
          Prior to Beta 2 the recommendation to users wishing to manipulate jQuery Mobile enhanced page and child widget markup was to bind to the
          %code
            %strong pagecreate
          event. In Beta 2 an internal change was made to decouple each of the widgets by binding to the
          %code
            %strong pagecreate
          event in place of direct calls to the widget methods. As a result, users binding to the
          %code
            %strong pagecreate
          in
          %code
            %strong mobileinit
          would find their binding executing before the markup had been enhanced by each of the plugins. In keeping with the lifecycle of the jQuery UI Widget Factory, the initialization method is invoked
          %strong after
          the create method, so the
          %code
            %strong pageinit
          event provides the correct timing for post enhancement manipulation of the DOM and/or Javascript objects.

          In short, if you were previously using
          %code
            %strong pagecreate
          to manipulate the enhanced markup before the page was shown its very likely you'll want to migrate to 'pageinit'.
      %h2 Touch events
      %dl
        %dt
          %code tap
        %dd Triggers after a quick, complete touch event.
        %dt
          %code taphold
        %dd Triggers after a held complete touch event (close to one second).
        %dt
          %code swipe
        %dd
          %p Triggers when a horizontal drag of 30px or more (and less than 20px vertically) occurs within 1 second duration but these can be configured:
          %ul
            %li
              %code scrollSupressionThreshold
              (default: 10px) – More than this horizontal displacement, and we will suppress scrolling
            %li
              %code durationThreshold
              (default: 1000ms) – More time than this, and it isn’t a swipe
            %li
              %code horizontalDistanceThreshold
              (default: 30px) – Swipe horizontal displacement must be more than this.
            %li
              %code verticalDistanceThreshold
              (default: 75px) – Swipe vertical displacement must be less than this.
        %dt
          %code swipeleft
        %dd Triggers when a swipe event occurred moving in the left direction.
        %dt
          %code swiperight
        %dd Triggers when a swipe event occurred moving in the right direction.
      %h2 Orientation change event
      %dl
        %dt
          %code orientationchange
        %dd
          Triggers when a device orientation changes (by turning it vertically or horizontally). When bound to this event, your callback function can leverage a second argument, which contains an
          %code orientation
          property equal to either "portrait" or "landscape". These values are also added as classes to the HTML element, allowing you to leverage them in your CSS selectors. Note that we currently bind to the resize event when orientationChange is not natively supported.
      %h2 Scroll events
      %dl
        %dt
          %code scrollstart
        %dd Triggers when a scroll begins. Note that iOS devices freeze DOM manipulation during scroll, queuing them to apply when the scroll finishes. We're currently investigating ways to allow DOM manipulations to apply before a scroll starts.
      %dl
        %dt
          %code scrollstop
        %dd Triggers when a scroll finishes.
      %h2 Page show/hide events
      %p Whenever a page is shown or hidden in jQuery Mobile, two events are triggered on that page. The events triggered depend on whether that page is being shown or hidden, so when a page transition occurs, there are actually 4 events triggered: 2 for each page.
      %dl
        %dt
          %code pagebeforeshow
        %dd Triggered on the page being shown, before its transition begins.
        %dt
          %code pagebeforehide
        %dd Triggered on the page being hidden, before its transition begins.
        %dt
          %code pageshow
        %dd Triggered on the page being shown, after its transition completes.
        %dt
          %code pagehide
        %dd Triggered on the page being hidden, after its transition completes.
      %p
        Note that all four of these events expose a reference to either the next page (
        %code> nextPage
        ) or previous page (
        %code> prevPage
        ), depending on whether the page is being shown or hidden, and whether that next or previous page exists (the first ever page shown does not have a previous page to reference, but an empty jQuery object is provided just the same). You can access this reference via the second argument of a bound callback function. For example:
      %pre
        %code
          :preserve
            $( 'div' ).live( 'pageshow',function(event, ui){
              alert( 'This page was just hidden: '+ ui.prevPage);
            });

            $( 'div' ).live( 'pagehide',function(event, ui){
              alert( 'This page was just shown: '+ ui.nextPage);
            });
      %p
        Also, for these handlers to be invoked during the initial page load, you must bind them before jQuery Mobile executes.  This can be done in the
        %code mobileinit
        handler, as described on the
        %a{:href => "/mobile/docs/api/globalconfig"} global config
        page.
        %h2 Page initialization events
        %p
          Internally, jQuery Mobile auto-initializes plugins based on the markup conventions found in a given "page". For example, an
          %code input
          element with a
          %code type
          of
          %code range
          will automatically generate a custom slider control.
        %p This auto-initialization is controlled by the "page" plugin, which dispatches events before and after it executes, allowing you to manipulate a page either pre-or-post initialization, or even provide your own intialization behavior and prevent the auto-initializations from occuring. Note that these events will only fire once per "page", as opposed to the show/hide events, which fire every time a page is shown and hidden.
        %dl
          %dt
            %code pagebeforecreate
          %dd
            %p Triggered on the page being initialized, before most plugin auto-initialization occurs.
            %pre
              %code
                :preserve
                  $( '#aboutPage' ).live( 'pagebeforecreate',function(event){
                    alert( 'This page was just inserted into the dom!' );
                  });
            %p
              Note that by binding to
              = succeed "," do
                %code pagebeforecreate
              you can manipulate markup before jQuery Mobile's default widgets are auto-initialized. For example, say you want to add data-attributes via JavaScript instead of in the HTML source, this is the event you'd use.
            %pre
              %code
                :preserve
                  $( '#aboutPage' ).live( 'pagebeforecreate',function(event){
                    // manipulate this page before its widgets are auto-initialized
                  });
          %dt
            %code pagecreate
          %dd
            %p Triggered when the page has been created in the DOM (via ajax or other) but before all widgets have had an opportunity to enhance the contained markup. This event is most useful for user's wishing to create their own custom widgets for child markup enhancement as the jquery mobile widgets do.
            %pre
              %code
                :preserve
                  $( '#aboutPage' ).live( 'pagecreate',function(event){
                    ( ":jqmData(role='sweet-plugin')" ).sweetPlugin();
                  });
          %dt
            %code pageinit
          %dd
            %p Triggered on the page being initialized, after initialization occurs. We recommend binding to this event instead of DOM ready() because this will work regardless of whether the page is loaded directly or if the content is pulled into another page as part of the Ajax navigation system.
            %pre
              %code
                :preserve
                  $( '#aboutPage' ).live( 'pageinit',function(event){
                    alert( 'This page was just enhanced by jQuery Mobile!' );
                  });
        %h2 Virtual mouse events
        %p We provide a set of "virtual" click events that normalize mouse and touch events. This allows the developer to register listeners for the basic mouse events, such as mousedown, mousemove, mouseup, and click, and the plugin will take care of registering the correct listeners behind the scenes to invoke the listener at the fastest possible time for that device. This still retains the order of event firing in the traditional mouse environment, should multiple handlers be registered on the same element for different events.
        %dl
          %dt
            %code vmouseover
          %dd
            Normalized event for handling touch or mouse
            %code mouseover
            events
          %dt
            %code vmousedown
          %dd
            Normalized event for handling touch or mouse
            %code mousedown
            events
          %dt
            %code vmousemove
          %dd
            Normalized event for handling touch or mouse
            %code mousemove
            events
          %dt
            %code vmouseup
          %dd
            Normalized event for handling touch or mouse
            %code mouseup
            events
          %dt
            %code vclick
          %dd
            Normalized event for handling touch or mouse
            %code click
            events
          %dt
            %code vmousecancel
          %dd
            Normalized event for handling touch or mouse
            %code mousecancel
            events
        %h2 Animation Events
        %p
          jQuery Mobile exposes the
          %code animationComplete
          plugin, which you can utilize after adding or removing a class that applies a CSS transition.
    / /content-secondary
    .content-secondary
      .ui-body-b
        %div{"data-collapsed" => "true", "data-role" => "collapsible", "data-theme" => "b"}
          %h3 More in this section
          %ul{"data-dividertheme" => "d", "data-role" => "listview", "data-theme" => "c"}
            %li{"data-role" => "list-divider"} API
            %li
              %a{:href => "/mobile/docs/api/globalconfig"} Configuring defaults
            %li{"data-theme" => "a"}
              %a{:href => "/mobile/docs/api/events"} Events
            %li
              %a{:href => "/mobile/docs/api/methods"} Methods &amp; Utilities
            %li
              %a{:href => "/mobile/docs/api/mediahelpers"} Responsive Layout
            %li
              %a{:href => "/mobile/docs/api/themes"} Theme framework
  / /content
  .footer-docs{"data-role" => "footer", "data-theme" => "c"}
    %p &copy; 2011 The jQuery Project
/ /page

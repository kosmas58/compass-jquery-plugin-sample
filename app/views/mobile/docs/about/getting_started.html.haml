-@title = "jQuery Mobile Docs - Quick start"
= render :partial => "/mobile/index.js.haml", :format => :js

.type-interior{"data-role" => "page"}
  %div{"data-role" => "header", "data-theme" => "f"}
    %h1 Quick start guide
    %a.ui-btn-right.jqm-home{"data-direction" => "reverse", "data-icon" => "home", "data-iconpos" => "notext", :href => "/mobile"} Home
  / /header
  %div{"data-role" => "content"}
    .content-primary
      %h2 Getting Started with jQuery Mobile
      %p jQuery Mobile provides a set of touch-friendly UI widgets and an AJAX-powered navigation system to support animated page transitions. Building your first jQuery Mobile page is easy, here's how:
      %h2 Create a basic page template
      %p
        Pop open your favorite text editor, paste in the
        %a{:href => "/mobile/docs/pages/anatomy", :id => "", :title => "page-anatomy"} page template
        below, save and open in a browser. You are now a mobile developer!
      %p
        Here's what's in the template. In the
        = succeed "," do
          %code head
        a meta
        %code viewport
        tag sets the screen width to the pixel width of the device and references to jQuery, jQuery Mobile and the mobile theme stylesheet from the CDN add all the styles and scripts.
      %p
        In the
        = succeed "," do
          %code body
        a div with a
        %code data-role
        of
        %code page
        is the wrapper used to delineate a page, and the header bar (
        %code> data-role="header"
        ) and content region (
        %code> data-role="content"
        ) are added inside to create a basic page (these are both optional). These
        %code data-
        attributes are HTML5  attributes are used throughout jQuery Mobile to transform basic markup into an enhanced and styled widget.
      %pre
        %code
          :preserve
            &lt;!DOCTYPE html&gt;
            &lt;html&gt;
              &lt;head&gt;
                &lt;title&gt;My Page&lt;/title&gt;
                &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
                &lt;link rel=&quot;stylesheet&quot; href=&quot;http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.css&quot; /&gt;
                &lt;script type=&quot;text/javascript&quot; src=&quot;http://code.jquery.com/jquery-1.6.4.min.js&quot;&gt;&lt;/script&gt;
                &lt;script type=&quot;text/javascript&quot; src=&quot;http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.js&quot;&gt;&lt;/script&gt;
              &lt;/head&gt;
              &lt;body&gt;
                &lt;div data-role=&quot;page&quot;&gt;
                  &lt;div data-role=&quot;header&quot;&gt;
                    &lt;h1&gt;My Title&lt;/h1&gt;
                  &lt;/div&gt;&lt;!-- /header --&gt;

                  &lt;div data-role=&quot;content&quot;&gt;
                    &lt;p&gt;Hello world&lt;/p&gt;
                  &lt;/div&gt;&lt;!-- /content --&gt;
                &lt;/div&gt;&lt;!-- /page --&gt;
              &lt;/body&gt;
            \&lt;/html&gt;
      %h2 Add your content
      %p
        Inside your content container, you can add all any standard
        %a{:href => "/mobile/docs/content/html"} HTML elements
        \- headings, lists, paragraphs, etc. You can write your own custom styles to create custom layouts by adding an additional stylesheet to the
        %code head
        after the jQuery Mobile stylesheet.
      %h2 Make a listview
      %p
        jQuery Mobile includes a diverse set of common
        %a{:href => "/mobile/docs/lists/docs_lists", :id => "", :title => "docs-lists"} listviews
        that are coded as lists with a
        %code data-role="listview"
        added. Here is a simple linked list that has a role of
        = succeed "." do
          %code listview
        We're going to make this look like an inset module by adding a
        %code data-inset="true"
        and add a dynamic search filter with the
        %code data-filter="true"
        attributes.
      %pre
        %code
          :preserve
            &lt;ul data-role=&quot;listview&quot; data-inset=&quot;true&quot; data-filter=&quot;true&quot;&gt;
              &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Acura&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Audi&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#&quot;&gt;BMW&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Cadillac&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Ferrari&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
      %ul{"data-filter" => "true", "data-inset" => "true", "data-role" => "listview"}
        %li
          %a{:href => "#"} Acura
        %li
          %a{:href => "#"} Audi
        %li
          %a{:href => "#"} BMW
        %li
          %a{:href => "#"} Cadillac
        %li
          %a{:href => "#"} Ferrari
      %h2 Add a slider
      %p
        The framework contains a full set of
        %a{:href => "/mobile/docs/forms/all"} form elements
        that automatically are enhanced into touch-friendly styled widgets. Here's a slider made with the new HTML5 input type of range, no
        %code data-role
        needed. Be sure to wrap these in a
        %code form
        element and always properly associate a
        %code label
        to every form element.
      %pre
        %code
          :preserve
            &lt;form&gt;
              &lt;label for=&quot;slider-0&quot;&gt;Input slider:&lt;/label&gt;
              &lt;input type=&quot;range&quot;  name=&quot;slider&quot; id=&quot;slider-0&quot; value=&quot;25&quot; min=&quot;0&quot; max=&quot;100&quot;  /&gt;
            &lt;/form&gt;
      %form
        %label{:for => "slider-0"} Input slider:
        %input#slider-0{:max => "100", :min => "0", :name => "slider-1", :type => "range", :value => "25"}/
      %h2 Make a button
      %p
        There are a few ways to make
        = succeed "," do
          %a{:href => "/mobile/docs/buttons/types", :title => "buttons-types"} buttons
        but lets turn a link into a button so it's easy to click. Just start with a link and add a
        %code data-role="button"
        attribute to it.  You can add an
        %a{:href => "/mobile/docs/buttons/icons"} icon
        with the
        %code data-icon
        attribute and optionally set its position with the
        %code data-iconpos
        attribute.
      %pre
        %code
          :preserve
            &lt;a href=&quot;#&quot; data-role=&quot;button&quot; data-icon=&quot;star&quot;&gt;Star button&lt;/a&gt;
      %a{"data-icon" => "star", "data-role" => "button", :href => "#"} Star button
      %h2 Play with theme swatches
      %p
        jQuery Mobile has a robust
        %a{:href => "/mobile/docs/api/themes", :id => ""} theme framework
        that supports up to 26 sets of toolbar, content and button colors, called a "swatch". Just add a
        %code data-theme="e"
        attribute to any of the widgets on this page: page, header, list, input for the slider, or button to turn it yellow. Try different swatch letters in default theme from a-e to mix and match swatches.
      %p Cool party trick: add the theme swatch to the page and see how all the widgets inside the content will automatically inherit the theme (headers don't inherit, they default to swatch A).
      %code
        &lt;a href=&quot;#&quot; data-role=&quot;button&quot; data-icon=&quot;star&quot;
        data-theme=&quot;a&quot;&gt;Button&lt;/a&gt;
      %a{"data-icon" => "star", "data-role" => "button", "data-theme" => "a", :href => "#"} data-theme="a"
      %a{"data-icon" => "star", "data-role" => "button", "data-theme" => "b", :href => "#"} data-theme="b"
      %a{"data-icon" => "star", "data-role" => "button", "data-theme" => "c", :href => "#"} data-theme="c"
      %a{"data-icon" => "star", "data-role" => "button", "data-theme" => "d", :href => "#"} data-theme="d"
      %a{"data-icon" => "star", "data-role" => "button", "data-theme" => "e", :href => "#"} data-theme="e"
      %p
        When you're ready to build a custom theme, use
        %a{:href => "http://www.jquerymobile.com/themeroller", :rel => "external"} ThemeRoller
        to drag and drop, then download a custom theme.
      %h2 Go forth and build stuff
      %p
        This is just scratching the surface of all the cool things you can build with jQuery Mobile with little effort. Be sure to explore
        = succeed "," do
          %a{:href => "/mobile/docs/pages/links", :id => "", :title => "page-links"} linking pages
        = succeed "," do
          %a{:href => "/mobile/docs/pages/transitions", :id => "", :title => "page-transitions"} adding animated page transitions
        and
        = succeed "." do
          %a{:href => "/mobile/docs/pages/dialogs", :id => "", :title => "page-dialogs"} creating dialogs
        Use the
        %a{:href => "/mobile/docs/api/data_attributes", :id => "", :title => "data-attributes"} data-attribute reference
        to try out some of the other
        %code data-
        attributes you can play with.
      %p
        %strong More of a developer?
        Great, forget everything we just covered (kidding). If you don't want to use the
        %code data-
        attribute configuration system, you can take full control of everything and call plugins directly because these are all just standard jQuery plugins built with the UI widget factory. Be sure to dig into
        = succeed "," do
          %a{:href => "/mobile/docs/api/globalconfig", :id => "", :title => "globalconfig"} global configuration
        = succeed "," do
          %a{:href => "/mobile/docs/api/events", :id => "", :title => "events"} events
        and
        = succeed "." do
          %a{:href => "/mobile/docs/api/methods", :id => "", :title => "methods"} methods
        Then read up on
        = succeed "," do
          %a{:href => "/mobile/docs/pages/scripting", :id => "", :title => "page-scripting"} scripting pages
        = succeed "," do
          %a{:href => "/mobile/docs/pages/dynamics", :id => "", :title => "page-dynamic"} generating dynamic pages
        and
        = succeed "." do
          %a{:href => "/mobile/docs/pages/phonegap", :id => "", :title => "phonegap"} building PhoneGap apps
    / /content-primary
    .content-secondary
      .ui-body-b
        %div{"data-collapsed" => "true", "data-content-theme" => "d", "data-role" => "collapsible", "data-theme" => "b"}
          %h3 More in this section
          %ul{"data-dividertheme" => "d", "data-role" => "listview", "data-theme" => "c"}
            %li{"data-role" => "list-divider"} Overview
            %li
              %a{:href => "/mobile/docs/about/intro"} Intro to jQuery Mobile
            %li{"data-theme" => "a"}
              %a{:href => "/mobile/docs/about/getting_started"} Quick start guide
            %li
              %a{:href => "/mobile/docs/about/features"} Features
            %li
              %a{:href => "/mobile/docs/about/accessibility"} Accessibility
            %li
              %a{:href => "/mobile/docs/about/platforms"} Supported platforms
  / /content
  .footer-docs{"data-role" => "footer", "data-theme" => "c"}
    %p &copy; 2011 The jQuery Project
/ /page

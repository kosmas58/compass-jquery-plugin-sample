%div{"data-role" => "page"}
  %div{"data-role" => "header"}
    %h1 .delay()
  #delay1{"data-role" => "content", "data-theme" => "c"}
    %h2.jq-clearfix.roundTop.section-title
      %span.name .delay( duration, [ queueName ] )
      %span.returns
        Returns:
        %a.return{:href => "http://docs.jquery.com/Types#jQuery"} jQuery
    .entry-details
      %p.desc
        %strong> Description:
        Set a timer to delay execution of subsequent items in the queue.
      %ul.signatures
        %li#delay-duration-queueName.signature
          %h4.name
            %span.versionAdded>
              version added:
              %a{:href => "/category/version/1.4/"} 1.4
            \.delay( duration, [ queueName ] )
          %p.arguement
            %strong> duration
            An integer indicating the number of milliseconds to delay execution of the next item in the queue.
          %p.arguement
            %strong> queueName
            A string containing the name of the queue. Defaults to
            = succeed "," do
              %code fx
            the standard effects queue.
      .longdesc
        %p
          Added to jQuery in version 1.4, the
          %code .delay()
          method allows us to delay the execution of functions that follow it in the queue. It can be used with the standard effects queue or with a custom queue.
        %p
          Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings
          %code 'fast'
          and
          %code 'slow'
          can be supplied to indicate durations of 200 and 600 milliseconds, respectively.
        %p
          Using the standard effects queue, we can, for example, set an 800-millisecond delay between the
          %code .slideUp()
          and
          %code .fadeIn()
          of
          = succeed ":" do
            %code &lt;div id="foo"&gt;
        %pre $('#foo').slideUp(300).delay(800).fadeIn(400);
        %p When this statement is executed, the element slides up for 300 milliseconds and then pauses for 800 milliseconds before fading in for 400 milliseconds.
        %p
          %strong
            jQuery.delay() is best for delaying between queued jQuery effects and such, and is not a replacement for JavaScript's native
            %a{:href => "http://developer.mozilla.org/en/DOM/window.setTimeout"} setTimeout
            function, which may be more appropriate for certain use cases.
      %h3 Example:
      #entry-examples.entry-examples
        #example-0
          %h4
            %span.desc Animate the hiding and showing of two divs, delaying the first before showing it.
          %pre
            %code.example.demo-code
              :preserve
                &lt;!DOCTYPE html&gt;
                &lt;html&gt;
                &lt;head&gt;
                  &lt;style&gt;
                div { width: 60px; height: 60px; float: left; }
                .first { background-color: #3f3; }
                .second { background-color: #33f;}
                &lt;/style&gt;
                  &lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
                &lt;/head&gt;
                &lt;body&gt;
                	
                &lt;p&gt;&lt;button&gt;Run&lt;/button&gt;&lt;/p&gt;
                &lt;div class="first"&gt;&lt;/div&gt;
                &lt;div class="second"&gt;&lt;/div&gt;
                	
                &lt;script&gt;
                    $("button").click(function() {
                      $("div.first").slideUp(300).delay(800).fadeIn(400);
                      $("div.second").slideUp(300).fadeIn(400);
                    });
                &lt;/script&gt;
                &lt;/body&gt;
                &lt;/html&gt;          %h4 Demo:
          .demo.code-demo

%div{"data-role" => "page"}
  %div{"data-role" => "header"}
    %h1 jQuery.noConflict()
  %div{"data-role" => "content", "data-theme" => "c", :id => "jQuery.noConflict1"}
    %h2.jq-clearfix.roundTop.section-title
      %span.name jQuery.noConflict( [ removeAll ] )
      %span.returns
        Returns:
        %a.return{:href => "http://docs.jquery.com/Types#Object"} Object
    .entry-details
      %p.desc
        %strong> Description:
        Relinquish jQuery's control of the $ variable.
      %ul.signatures
        %li.signature{:id => "jQuery.noConflict-removeAll"}
          %h4.name
            %span.versionAdded>
              version added:
              %a{:href => "/category/version/1.0/"} 1.0
            jQuery.noConflict( [ removeAll ] )
          %p.arguement
            %strong> removeAll
            A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).
      .longdesc
        %p
          Many JavaScript libraries use
          %code $
          as a function or variable name, just as jQuery does. In jQuery's case,
          %code $
          is just an alias for
          = succeed "," do
            %code jQuery
          so all functionality is available without using
          = succeed "." do
            %code $
          If we need to use another JavaScript library alongside jQuery, we can return control of
          %code $
          back to the other library with a call to
          = succeed ":" do
            %code $.noConflict()
        %pre
          :preserve
            
            &lt;script type="text/javascript" src="other_lib.js"&gt;&lt;/script&gt;
            &lt;script type="text/javascript" src="jquery.js"&gt;&lt;/script&gt;
            &lt;script type="text/javascript"&gt;
              $.noConflict();
              // Code that uses other library's $ can follow here.
            &lt;/script&gt;
        %p This technique is especially effective in conjunction with the .ready() method's ability to alias the jQuery object, as within callback passed to .ready() we can use $ if we wish without fear of conflicts later:
        %pre
          :preserve
            
            &lt;script type="text/javascript" src="other_lib.js"&gt;&lt;/script&gt;
            &lt;script type="text/javascript" src="jquery.js"&gt;&lt;/script&gt;
            &lt;script type="text/javascript"&gt;
              $.noConflict();
              $(document).ready(function($) {
                // Code that uses jQuery's $ can follow here.
              });
              // Code that uses other library's $ can follow here.
            &lt;/script&gt;
        %p
          If necessary, we can free up the
          %code jQuery
          name as well by passing
          %code true
          as an argument to the method. This is rarely necessary, and if we must do this (for example, if we need to use multiple versions of the
          %code jQuery
          library on the same page), we need to consider that most plug-ins rely on the presence of the jQuery variable and may not operate correctly in this situation.
      %h3 Examples:
      #entry-examples.entry-examples
        #example-0
          %h4
            Example:
            %span.desc Maps the original object that was referenced by $ back to $.
          %pre
            %code.example
              :preserve
                jQuery.noConflict();
                // Do something with jQuery
                jQuery("div p").hide();
                // Do something with another library's $()
                $("content").style.display = 'none';        #example-1
          %h4
            Example:
            %span.desc
              Reverts the $ alias and then creates and executes a function to provide the $ as a jQuery alias inside the functions scope. Inside the function the original $ object is not available. This works well for most plugins that don't rely on any other library.
          %pre
            %code.example
              :preserve
                jQuery.noConflict();
                (function($) { 
                  $(function() {
                    // more code using $ as alias to jQuery
                  });
                })(jQuery);
                // other code using $ as an alias to the other library        #example-2
          %h4
            Example:
            %span.desc
              You can chain the jQuery.noConflict() with the shorthand ready for a compact code.
          %pre
            %code.example
              :preserve
                jQuery.noConflict()(function(){
                    // code using jQuery
                }); 
                // other code using $ as an alias to the other library        #example-3
          %h4
            Example:
            %span.desc Creates a different alias instead of jQuery to use in the rest of the script.
          %pre
            %code.example
              :preserve
                var j = jQuery.noConflict();
                // Do something with jQuery
                j("div p").hide();
                // Do something with another library's $()
                $("content").style.display = 'none';        #example-4
          %h4
            Example:
            %span.desc Completely move jQuery to a new namespace in another object.
          %pre
            %code.example
              :preserve
                var dom = {};
                dom.query = jQuery.noConflict(true);          %h4 Result:
          %pre
            %code.results
              :preserve
                // Do something with the new jQuery
                dom.query("div p").hide();
                // Do something with another library's $()
                $("content").style.display = 'none';
                // Do something with another version of jQuery
                jQuery("div &gt; p").hide();
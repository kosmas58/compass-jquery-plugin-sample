%div{"data-role" => "page"}
  %div{"data-role" => "header"}
    %h1 .bind()
  #bind1{"data-role" => "content", "data-theme" => "c"}
    %h2.jq-clearfix.roundTop.section-title
      %span.name .bind( eventType, [ eventData ], handler(eventObject) )
      %span.returns
        Returns:
        %a.return{:href => "http://docs.jquery.com/Types#jQuery"} jQuery
    .entry-details
      %p.desc
        %strong> Description:
        Attach a handler to an event for the elements.
      %ul.signatures
        %li#bind-eventType-eventData-handlereventObject.signature
          %h4.name
            %span.versionAdded>
              version added:
              %a{:href => "/category/version/1.0/"} 1.0
            \.bind( eventType, [ eventData ], handler(eventObject) )
          %p.arguement
            %strong> eventType
            A string containing one or more JavaScript event types, such as "click" or "submit," or custom event names.
          %p.arguement
            %strong> eventData
            A map of data that will be passed to the event handler.
          %p.arguement
            %strong> handler(eventObject)
            A function to execute each time the event is triggered.
        %li#bind-events.signature
          %h4.name
            %span.versionAdded>
              version added:
              %a{:href => "/category/version/1.4/"} 1.4
            \.bind( events )
          %p.arguement
            %strong> events
            A map of one or more JavaScript event types and functions to execute for them.
      .longdesc
        %p
          The
          %code .bind()
          method is the primary means of attaching behavior to a document. All JavaScript event types, such as
          = succeed "," do
            %code focus
          = succeed "," do
            %code mouseover
          and
          = succeed "," do
            %code resize
          are allowed for
          %code eventType.
        %p
          The jQuery library provides shortcut methods for binding the standard event types, such as
          %code .click()
          for
          = succeed "." do
            %code .bind('click')
          A description of each can be found in the discussion of its shortcut method:
          = succeed "," do
            %a{:href => "/blur"} blur
          = succeed "," do
            %a{:href => "/focus"} focus
          = succeed "," do
            %a{:href => "/focusin"} focusin
          = succeed "," do
            %a{:href => "/focusout"} focusout
          = succeed "," do
            %a{:href => "/load"} load
          = succeed "," do
            %a{:href => "/resize"} resize
          = succeed "," do
            %a{:href => "/scroll"} scroll
          = succeed "," do
            %a{:href => "/unload"} unload
          = succeed "," do
            %a{:href => "/click"} click
          = succeed "," do
            %a{:href => "/dblclick"} dblclick
          = succeed "," do
            %a{:href => "/mousedown"} mousedown
          = succeed "," do
            %a{:href => "/mouseup"} mouseup
          = succeed "," do
            %a{:href => "/mousemove"} mousemove
          = succeed "," do
            %a{:href => "/mouseover"} mouseover
          = succeed "," do
            %a{:href => "/mouseout"} mouseout
          = succeed "," do
            %a{:href => "/mouseenter"} mouseenter
          = succeed "," do
            %a{:href => "/mouseleave"} mouseleave
          = succeed "," do
            %a{:href => "/change"} change
          = succeed "," do
            %a{:href => "/select"} select
          = succeed "," do
            %a{:href => "/submit"} submit
          = succeed "," do
            %a{:href => "/keydown"} keydown
          = succeed "," do
            %a{:href => "/keypress"} keypress
          = succeed "," do
            %a{:href => "/keyup"} keyup
          %a{:href => "/error"} error
        %p
          Any string is legal for
          = succeed ";" do
            %code eventType
          if the string is not the name of a native JavaScript event, then the handler is bound to a custom event. These events are never called by the browser, but may be triggered manually from other JavaScript code using
          %code .trigger()
          or
          = succeed "." do
            %code .triggerHandler()
        %p
          If the
          %code eventType
          string contains a period (
          %code> .
          ) character, then the event is namespaced. The period character separates the event from its namespace. For example, in the call
          = succeed "," do
            %code .bind('click.name', handler)
          the string
          %code click
          is the event type, and the string
          %code name
          is the namespace. Namespacing allows us to unbind or trigger some events of a type without affecting others. See the discussion of
          %code .unbind()
          for more information.
        %p When an event reaches an element, all handlers bound to that event type for the element are fired. If there are multiple handlers registered, they will always execute in the order in which they were bound. After all handlers have executed, the event continues along the normal event propagation path.
        %p
          A basic usage of
          %code .bind()
          is:
        %pre
          :preserve
            
            $('#foo').bind('click', function() {
              alert('User clicked on "foo."');
            });
        %p
          This code will cause the element with an ID of
          %code foo
          to respond to the
          %code click
          event. When a user clicks inside this element thereafter, the alert will be shown.
        %h4#multiple-events Multiple Events
        %p Multiple event types can be bound at once by including each one separated by a space:
        %pre
          :preserve
            
            $('#foo').bind('mouseenter mouseleave', function() {
              $(this).toggleClass('entered');
            });
        %p
          The effect of this on
          %code &lt;div id="foo"&gt;
          (when it does not initially have the "entered" class) is to add the "entered" class when the mouse enters the
          %code &lt;div&gt;
          and remove the class when the mouse leaves.
        %p As of jQuery 1.4 we can bind multiple event handlers simultaneously by passing a map of event type/handler pairs:
        %pre
          :preserve
            
            $('#foo').bind({
              click: function() {
                // do something on click
              },
              mouseenter: function() {
                // do something on mouseenter
              }
            });
        %h4#event-handlers Event Handlers
        %p
          The
          %code handler
          parameter takes a callback function, as shown above. Within the handler, the keyword
          %code this
          refers to the DOM element to which the handler is bound. To make use of the element in jQuery, it can be passed to the normal
          %code $()
          function. For example:
        %pre
          :preserve
            $('#foo').bind('click', function() {
              alert($(this).text());
            });
        %p
          After this code is executed, when the user clicks inside the element with an ID of
          = succeed "," do
            %code foo
          its text contents will be shown as an alert.
        %p As of jQuery 1.4.2 duplicate event handlers can be bound to an element instead of being discarded. For example:
        %pre
          :preserve
            function test(){ alert("Hello"); }
            $("button").click( test );
            $("button").click( test );
        %p The above will generate two alerts when the button is clicked.
        %h4#event-object
          %a{:href => "/category/events/event-object/"} The Event object
        %p
          The
          %code handler
          callback function can also take parameters. When the function is called, the JavaScript event object will be passed to the first parameter.
        %p
          The event object is often unnecessary and the parameter omitted, as sufficient context is usually available when the handler is bound to know exactly what needs to be done when the handler is triggered. However, at times it becomes necessary to gather more information about the user's environment at the time the event was initiated.
          = succeed "." do
            %a{:href => "/category/events/event-object/"} View the full Event Object
        %p
          Returning
          %code false
          from a handler is equivalent to calling both
          %code .preventDefault()
          and
          %code .stopPropagation()
          on the event object.
        %p Using the event object in a handler looks like this:
        %pre
          :preserve
            $(document).ready(function() {
              $('#foo').bind('click', function(event) {
                alert('The mouse cursor is at ('
                  + event.pageX + ', ' + event.pageY + ')');
              });
            });
        %p
          Note the parameter added to the anonymous function. This code will cause a click on the element with ID
          %code foo
          to report the page coordinates of the mouse cursor at the time of the click.
        %h4#passing-event-data Passing Event Data
        %p
          The optional
          %code eventData
          parameter is not commonly used. When provided, this argument allows us to pass additional information to the handler. One handy use of this parameter is to work around issues caused by closures. For example, suppose we have two event handlers that both refer to the same external variable:
        %pre
          :preserve
            var message = 'Spoon!';
            $('#foo').bind('click', function() {
              alert(message);
            });
            message = 'Not in the face!';
            $('#bar').bind('click', function() {
              alert(message);
            });
        %p
          Because the handlers are closures that both have
          %code message
          in their environment, both will display the message
          %span.output Not in the face!
          when triggered. The variable's value has changed. To sidestep this, we can pass the message in using
          = succeed ":" do
            %code eventData
        %pre
          :preserve
            var message = 'Spoon!';
            $('#foo').bind('click', {msg: message}, function(event) {
              alert(event.data.msg);
            });
            message = 'Not in the face!';
            $('#bar').bind('click', {msg: message}, function(event) {
              alert(event.data.msg);
            });
        %p
          This time the variable is not referred to directly within the handlers; instead, the variable is passed in
          %em by value
          through
          = succeed "," do
            %code eventData
          which fixes the value at the time the event is bound. The first handler will now display
          %span.output Spoon!
          while the second will alert
          %span.output Not in the face!
        %blockquote
          %p
            Note that objects are passed to functions
            = succeed "," do
              %em by reference
            which further complicates this scenario.
        %p
          If
          %code eventData
          is present, it is the second argument to the
          %code .bind()
          method; if no additional data needs to be sent to the handler, then the callback is passed as the second and final argument.
        %blockquote
          %p
            See the
            %code .trigger()
            method reference for a way to pass data to a handler at the time the event happens rather than when the handler is bound.
        %p As of jQuery 1.4 we can no longer attach data (and thus, events) to object, embed, or applet elements because critical errors occur when attaching data to Java applets.
      %h3 Examples:
      #entry-examples.entry-examples
        #example-0
          %h4
            Example:
            %span.desc Handle click and double-click for the paragraph.  Note: the coordinates are window relative, so in this case relative to the demo iframe.
          %pre
            %code.example.demo-code
              :preserve
                &lt;!DOCTYPE html&gt;
                &lt;html&gt;
                &lt;head&gt;
                  &lt;style&gt;
                p { background:yellow; font-weight:bold; cursor:pointer; 
                padding:5px; }
                p.over { background: #ccc; }
                span { color:red; }
                &lt;/style&gt;
                  &lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
                &lt;/head&gt;
                &lt;body&gt;
                	&lt;p&gt;Click or double click here.&lt;/p&gt;
                &lt;span&gt;&lt;/span&gt;
                &lt;script&gt;
                $("p").bind("click", function(event){
                var str = "( " + event.pageX + ", " + event.pageY + " )";
                $("span").text("Click happened! " + str);
                });
                $("p").bind("dblclick", function(){
                $("span").text("Double-click happened in " + this.nodeName);
                });
                $("p").bind("mouseenter mouseleave", function(event){
                $(this).toggleClass("over");
                });
                
                &lt;/script&gt;
                &lt;/body&gt;
                &lt;/html&gt;          %h4 Demo:
          .demo.code-demo
        #example-1
          %h4
            Example:
            %span.desc To display each paragraph's text in an alert box whenever it is clicked:
          %pre
            %code.example
              :preserve
                $("p").bind("click", function(){
                alert( $(this).text() );
                });        #example-2
          %h4
            Example:
            %span.desc You can pass some extra data before the event handler:
          %pre
            %code.example
              :preserve
                function handler(event) {
                alert(event.data.foo);
                }
                $("p").bind("click", {foo: "bar"}, handler)        #example-3
          %h4
            Example:
            %span.desc Cancel a default action and prevent it from bubbling up by returning false:
          %pre
            %code.example $("form").bind("submit", function() { return false; })
        #example-4
          %h4
            Example:
            %span.desc Cancel only the default action by using the .preventDefault() method.
          %pre
            %code.example
              :preserve
                $("form").bind("submit", function(event) {
                event.preventDefault();
                });        #example-5
          %h4
            Example:
            %span.desc Stop an event from bubbling without preventing the default action by using the .stopPropagation() method.
          %pre
            %code.example
              :preserve
                $("form").bind("submit", function(event) {
                  event.stopPropagation();
                });        #example-6
          %h4
            Example:
            %span.desc Bind custom events.
          %pre
            %code.example.demo-code
              :preserve
                &lt;!DOCTYPE html&gt;
                &lt;html&gt;
                &lt;head&gt;
                  &lt;style&gt;
                p { color:red; }
                span { color:blue; }
                &lt;/style&gt;
                  &lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
                &lt;/head&gt;
                &lt;body&gt;
                	&lt;p&gt;Has an attached custom event.&lt;/p&gt;
                &lt;button&gt;Trigger custom event&lt;/button&gt;
                &lt;span style="display:none;"&gt;&lt;/span&gt;
                &lt;script&gt;
                
                $("p").bind("myCustomEvent", function(e, myName, myValue){
                $(this).text(myName + ", hi there!");
                $("span").stop().css("opacity", 1)
                .text("myName = " + myName)
                .fadeIn(30).fadeOut(1000);
                });
                $("button").click(function () {
                $("p").trigger("myCustomEvent", [ "John" ]);
                });
                
                &lt;/script&gt;
                &lt;/body&gt;
                &lt;/html&gt;          %h4 Demo:
          .demo.code-demo
        #example-7
          %h4
            Example:
            %span.desc Bind multiple events simultaneously.
          %pre
            %code.example
              :preserve
                $("div.test").bind({
                  click: function(){
                    $(this).addClass("active");
                  },
                  mouseenter: function(){
                    $(this).addClass("inside");
                  },
                  mouseleave: function(){
                    $(this).removeClass("inside");
                  }
                });
%link{:href => "/images/demo/mobile/list-maker-icon.png", :rel => "apple-touch-icon"}/

:css
  .ui-li-has-thumb .ui-btn-inner { min-height: 1em; padding-left: 0.5em; }
  .ui-li-thumb { position: relative; }
  #box { background-repeat: no-repeat; background-clip: none; width: 23px; border: 0px; }

= javascript_include_tag :tmpl, :offline

%script#item_template{:type => "text/x-jquery-tmpl"}
  %li
    {{if list_item.checked }}
    %img#box.ui-icon-checkbox-off.ui-icon-checkbox-on{ :src => "/images/demo/empty.png" }
    {{else}}
    %img#box.ui-icon-checkbox-off{ :src => "/images/demo/empty.png" }
    {{/if}}
    %a#item{ :value => "${list_item.id}", :href => "#" }
      ${list_item.name}
    %a#item_delete{:value => "${list_item.id}", :href => "#", "data-rel" => "dialog", "data-transition" => "pop" }
      Remove ${list_item.name}

%script#item_template_new{:type => "text/x-jquery-tmpl"}
  %li
    %img#box.ui-icon-checkbox-off{ :src => "/images/demo/empty.png" }
    %a#item
      ${list_item.name}
    %a#item_delete{ "data-rel" => "dialog", "data-transition" => "pop" }
      Remove ${list_item.name}

:javascript
  var holdTheInterval;
  
  function itemsRefresh() {
    $.retrieveJSON("/mobile/experiments/list_items?format=json", function(data) {
      var pendingItems = $.parseJSON(localStorage["pendingItems"]);
      //$("#items").html($("#item_template").tmpl(data.concat(pendingItems))).listview("refresh");
      $("#items").html($("#item_template").tmpl(data)).listview("refresh");
    });
    clearInterval(holdTheInterval);
  };

  function itemCreate(name){
    if (!name || /^\s*$/.test(name)) {
      alert("Name cannot be empty");
    }
    else {
      $.ajax({
        type:        'POST',
        url:         '/mobile/experiments/list_items?format=jsonr',
        data:        { 
                       "authenticity_token" : "#{form_authenticity_token}",
                       "list_item"          : { "name" : name }
                     }, 
        timeout:     1000,
        success:     function(response, status) {
                       itemsRefresh();
                     },
        error:       function(XMLHttpRequest, textStatus, errorThrown) {
                       $("#item_name").val(textStatus);
                     }
      });
    }
  };
  
  function itemUpdate(item, checked){
    $.ajax({
      type:        'PUT',
      url:         '/mobile/experiments/list_items/'+item,
      data:        { 
                     "authenticity_token" : "#{form_authenticity_token}",
                     "list_item"          : { "checked" : checked }
                   }, 
      dataType:    "json",
      timeout:     1000,
      error:       function() {
                     alert(textStatus);
                   }
    });
  };
  
  function itemDelete(item){
    $.ajax({
      type:        'DELETE',
      url:         '/mobile/experiments/list_items/'+item,
      data:        { 
                     "authenticity_token" : "#{form_authenticity_token}"
                   }, 
      dataType:    "json",
      timeout:     1000,
      error:       function() {
                     alert(textStatus);
                   }
    });
  };
  
  function sendPending() {
    if (window.navigator.onLine) {
      var pendingItems = $.parseJSON(localStorage["pendingItems"]);
      if (pendingItems.length > 0) {
        var pendingItem = pendingItems[0];
        switch( pendingItem["method"] ) {
          case "POST":
            itemCreate( pendingItem["list_item"]["name"] );
            break;
          case "PUT":
            itemUpdate( pendingItem["list_item"]["id"], pendingItem["list_item"]["checked"]);
            break;
          case "DELETE":
            itemDelete( pendingItem["list_item"]["id"] );
            break;
        };
        var pendingItems = $.parseJSON(localStorage["pendingItems"]);
        pendingItems.shift();
        localStorage["pendingItems"] = JSON.stringify(pendingItems)
        setTimeout(sendPending, 100);
      }
    }
  };
  
  $(function() {
    if ($.support.localStorage) {
      $(window.applicationCache).bind("error", function() {
        console.log("There was an error when loading the cache manifest.");
      });
      
      if (!localStorage["pendingItems"]) {
        localStorage["pendingItems"] = JSON.stringify([]);
      }
      itemsRefresh();
      sendPending();
      $(window).bind("online", sendPending);
    } else {
      alert("Try a different browser.");
    };
  });
  
  $(document).ready(function() {
    $("#item").live('click', function(){
      var item = $(this).attr("value");
      var checked;
      if (item) {
        var box = $(this).parent().children("#box");
        if (box.hasClass("ui-icon-checkbox-on")) {
          box.removeClass("ui-icon-checkbox-on");
          checked = false;
        }
        else {
          box.addClass("ui-icon-checkbox-on");
          checked = true;
        }
        
        // Store data locally 
        var pendingItem = {"data":$(this).serialize(), "list_item":{"id": item, "checked": checked}, "method": "PUT"};
        var pendingItems = $.parseJSON(localStorage["pendingItems"]);
        pendingItems.push(pendingItem);
        localStorage["pendingItems"] = JSON.stringify(pendingItems);
        
        // Initiate action
        sendPending();
      }
    });
    
    $("#item_create").live('click', function(){
      holdTheInterval = setInterval(itemsRefresh, 5000);
      var name = $("#item_name").val();
      var item = {"data":$(this).serialize(), "list_item":{"name": name}, "method": "POST"};
      
      // Store data locally 
      var pendingItems = $.parseJSON(localStorage["pendingItems"]);
      pendingItems.push(item);
      localStorage["pendingItems"] = JSON.stringify(pendingItems);
     
      // Refresh interface 
      $("#item_template_new").tmpl(item).appendTo("#items");
      $("#items").listview("refresh");
      $("#item_name").val("");
      
      // Initiate action
      sendPending();
    });
    
    $("#item_delete").live('click', function(){
      var item = $(this).attr("value");
      if (item) {
        // Store data locally 
        var pendingItem = {"data":$(this).serialize(), "list_item":{"id": item}, "method": "DELETE"};
        var pendingItems = $.parseJSON(localStorage["pendingItems"]);
        pendingItems.push(pendingItem);
        localStorage["pendingItems"] = JSON.stringify(pendingItems);
        
        // Refresh interface 
        $(this).parent().parent().parent().remove(); 
        $("#items").listview("refresh");
        
        // Initiate action
        sendPending();
      }
    });
  });
